import fetchMock from 'fetch-mock';
import React, { useState, useEffect, Fragment } from 'react';
import AlertStripe, { AlertStripeInfo } from 'nav-frontend-alertstriper';
import NavFrontendSpinner from 'nav-frontend-spinner';
import { Normaltekst, Element, Undertittel } from 'nav-frontend-typografi';
import { OppChevron, NedChevron } from 'nav-frontend-chevron';
import moment from 'moment';
import Hjelpetekst from 'nav-frontend-hjelpetekst';
import 'moment/locale/nb';
import Tabs from 'nav-frontend-tabs';
import { Select } from 'nav-frontend-skjema';

function styleInject(css, ref) {
  if (ref === void 0) ref = {};
  var insertAt = ref.insertAt;

  if (!css || typeof document === 'undefined') {
    return;
  }

  var head = document.head || document.getElementsByTagName('head')[0];
  var style = document.createElement('style');
  style.type = 'text/css';

  if (insertAt === 'top') {
    if (head.firstChild) {
      head.insertBefore(style, head.firstChild);
    } else {
      head.appendChild(style);
    }
  } else {
    head.appendChild(style);
  }

  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
}

var css = ".spinner__wrapper {\n  display: flex;\n  -webkit-justify-content: center;\n  justify-content: center;\n}\n.error__container {\n  padding: 1rem 0;\n}\n.af-detaljert__header {\n  display: flex;\n  flex-wrap: wrap;\n}\n@media all and (min-width: 959px) {\n  .af-detaljert__header {\n    padding: 0 0 0.25rem 0;\n  }\n}\n@media all and (max-width: 959px) {\n  .af-detaljert__header {\n    padding: 0 0 0.5rem 0;\n  }\n}\n@media all and (min-width: 959px) {\n  .af-detaljert__kolonne {\n    width: 50%;\n    padding-right: 2rem;\n    box-sizing: border-box;\n  }\n}\n@media all and (max-width: 959px) {\n  .af-detaljert__kolonne {\n    width: 100%;\n  }\n}\n.af-detaljert__innhold {\n  display: flex;\n  flex-wrap: wrap;\n}\n.af-detaljert__boks {\n  margin: 0.75rem 0;\n}\n@media all and (min-width: 959px), all and (max-width: 959px) {\n  .af-detaljert__boks {\n    width: 50%;\n    padding-right: 2rem;\n    box-sizing: border-box;\n  }\n}\n@media all and (max-width: 420px) {\n  .af-detaljert__boks {\n    width: 100%;\n  }\n}\n.af-detaljert__status {\n  display: flex;\n}\n.af-detaljert__arbeidsgiver {\n  padding: 0.5rem 0;\n}\n.af-detaljert__tabs {\n  margin: 1rem 0;\n}\n@media all and (min-width: 959px), all and (max-width: 959px) {\n  .af-detaljert__tabs {\n    display: block;\n  }\n  .af-detaljert__tabs-innhold {\n    margin: 2rem 1rem;\n  }\n}\n@media all and (max-width: 420px) {\n  .af-detaljert__tabs {\n    display: none;\n  }\n  .af-detaljert__tabs-innhold {\n    margin: 1rem 0rem;\n  }\n}\n@media all and (min-width: 959px), all and (max-width: 959px) {\n  .af-detaljert__select {\n    display: none;\n  }\n}\n@media all and (max-width: 420px) {\n  .af-detaljert__select {\n    display: block;\n  }\n}\n.af-detaljert__orgnr {\n  padding: 0.25rem 0;\n}\n.af-detaljert__periode {\n  display: flex;\n  flex-direction: row;\n  align-items: flex-end;\n}\n.af-detaljert__periode-content {\n  padding-left: 0.5rem;\n}\n.af-detaljert__hr {\n  margin: 1rem 0;\n}\n.af-detaljert__flex-table {\n  max-width: 100%;\n  border-collapse: collapse;\n}\n.af-detaljert__flex-rad {\n  border-bottom: 1px solid #979797;\n  display: flex;\n  padding: 0.25rem 0;\n}\n@media all and (min-width: 959px), all and (max-width: 959px) {\n  .af-detaljert__flex-rad {\n    flex-direction: row;\n  }\n}\n@media all and (max-width: 420px) {\n  .af-detaljert__flex-rad {\n    flex-direction: column;\n  }\n}\n.af-detaljert__flex-kolonne {\n  padding: 0.25rem 0;\n  flex-basis: 100%;\n}\n@media all and (max-width: 420px) {\n  .af-detaljert__head {\n    display: none;\n  }\n}\n@media all and (max-width: 420px) {\n  .af-detaljert__heading {\n    font-family: \"Source Sans Pro\", Arial, sans-serif;\n    font-size: 1rem;\n    line-height: 1.375rem;\n    font-weight: 600;\n  }\n}\n.af-liste__tekst {\n  margin: 0 0 0.2rem 0;\n}\n.af-liste__flex-rad {\n  padding: 0.5rem 0;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  border-bottom: 1px solid #979797;\n}\n.af-liste__flex-rad:last-child {\n  border-bottom: 0;\n}\n.af-liste__flex-innhold {\n  min-width: 7rem;\n}\n.af-liste__vis-flere {\n  margin-top: 1rem;\n  cursor: pointer;\n  text-decoration: underline;\n  background: none;\n  border: none;\n  padding: 0;\n}\n.af-liste__tittel {\n  flex: 1;\n}\n.af-liste__ekspander {\n  cursor: pointer;\n  color: #0067c5;\n  text-decoration: underline;\n}\n.af-liste__month {\n  text-transform: capitalize;\n}\n.af-liste__rapporteringsperiode {\n  width: 15rem;\n}\n.af-liste__knapp {\n  background: none;\n  border: none;\n  padding: 0;\n}\ninput,\nbutton,\nselect,\ntextarea {\n  font-family: inherit;\n  font-size: inherit;\n  line-height: inherit;\n}\n.sr-only {\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  margin: -1px;\n  padding: 0;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  border: 0;\n}\n";
styleInject(css);

var afListe = [
	{
		ansettelsesperiode: {
			periode: {
				periodeFra: "1988-10-03",
				periodeTil: "1989-05-31"
			},
			varslingskode: null
		},
		arbeidsforholdId: "konvertert_af709505-128e-45dc-a241-7e14180f787d",
		arbeidsgiver: {
			type: "Organisasjon",
			orgnavn: "Capgemini Norge AS",
			orgnr: "972165050"
		},
		navArbeidsforholdId: "1",
		yrke: "Konsulent"
	},
	{
		ansettelsesperiode: {
			periode: {
				periodeFra: "1997-06-30"
			},
			varslingskode: null
		},
		arbeidsforholdId: "konvertert_fe82059e-303a-4d9d-a572-9b128ce5ffad",
		arbeidsgiver: {
			type: "Organisasjon",
			orgnavn: "Port Olga AS",
			orgnr: "972165050"
		},
		navArbeidsforholdId: "5",
		yrke: "Sigarettpakker"
	},
	{
		ansettelsesperiode: {
			periode: {
				periodeFra: "1989-08-29",
				periodeTil: "1990-07-02"
			},
			varslingskode: null
		},
		arbeidsforholdId: "konvertert_6139b248-5bf7-4a54-9f02-30a8a2caf52d",
		arbeidsgiver: {
			type: "Person",
			fnr: "12345678911"
		},
		navArbeidsforholdId: "4",
		yrke: "Lastebilsjåfør"
	},
	{
		ansettelsesperiode: {
			periode: {
				periodeFra: "1999-01-01",
				periodeTil: "2001-06-08"
			},
			varslingskode: null
		},
		arbeidsforholdId: "konvertert_7f9b5d0a-53c8-4acd-a6d0-6858fcbd3f1a",
		arbeidsgiver: {
			type: "Organisasjon",
			orgnavn: "Chasityview AS",
			orgnr: "972165050"
		},
		navArbeidsforholdId: "2",
		yrke: "Designer"
	},
	{
		ansettelsesperiode: {
			periode: {
				periodeFra: "2001-07-01",
				periodeTil: "2002-04-30"
			},
			varslingskode: null
		},
		arbeidsforholdId: "konvertert_82678eca-dedf-479a-8ea1-77bdd551edab",
		arbeidsgiver: {
			type: "Organisasjon",
			orgnavn: "Trondheim Rørleggerservice AS",
			orgnr: "972165050"
		},
		navArbeidsforholdId: "7",
		yrke: "Rørlegger"
	},
	{
		ansettelsesperiode: {
			periode: {
				periodeFra: "2003-05-05",
				periodeTil: "2006-05-31"
			},
			varslingskode: null
		},
		arbeidsforholdId: "konvertert_382a28a6-1c05-4b2f-b109-0a3c06c7ccb7",
		arbeidsgiver: {
			type: "Organisasjon",
			orgnavn: "Leuschkemouth AS",
			orgnr: "972165050"
		},
		navArbeidsforholdId: "3",
		yrke: "Kantinemedarbeider"
	},
	{
		ansettelsesperiode: {
			periode: {
				periodeFra: "2006-06-01",
				periodeTil: "2010-06-30"
			},
			varslingskode: "ERKONK"
		},
		arbeidsforholdId: "konvertert_15a351cf-8f9d-4307-8020-760989c7a907",
		arbeidsgiver: {
			type: "Organisasjon",
			orgnavn: "Deloitte AS",
			orgnr: "972165050"
		},
		navArbeidsforholdId: "6",
		yrke: "Konsulent"
	},
	{
		ansettelsesperiode: {
			periode: {
				periodeFra: "2010-07-01",
				periodeTil: "2014-12-31"
			},
			varslingskode: null
		},
		arbeidsforholdId: "konvertert_3ddff5b2-4035-415f-9aba-552cd44bc54d",
		arbeidsgiver: {
			type: "Organisasjon",
			orgnavn: "Oslo Bygg AS",
			orgnr: "972165050"
		},
		navArbeidsforholdId: "9",
		yrke: "Tømrer"
	},
	{
		ansettelsesperiode: {
			periode: {
				periodeFra: "2010-07-01",
				periodeTil: null
			},
			varslingskode: null
		},
		arbeidsforholdId: "1162-20100701-1",
		arbeidsgiver: {
			type: "Organisasjon",
			orgnavn: "Vinstra Karosseri AS",
			orgnr: "972165050"
		},
		navArbeidsforholdId: "8",
		yrke: "Daglig leder"
	}
];

var ansettelsesperiode = {
	periode: {
		periodeFra: "1988-10-03"
	},
	varslingskode: "TEST"
};
var antallTimerForTimelonnet = [
	{
		antallTimer: 37.5,
		periode: {
			periodeFra: "2014-01-01",
			periodeTil: "2014-01-31"
		},
		rapporteringsperiode: "2014-02"
	},
	{
		antallTimer: 37.5,
		periode: {
			periodeFra: "2014-02-01",
			periodeTil: "2014-02-28"
		},
		rapporteringsperiode: "2014-03"
	},
	{
		antallTimer: 37.5,
		periode: {
			periodeFra: "2014-03-01",
			periodeTil: "2014-03-31"
		},
		rapporteringsperiode: "2014-04"
	},
	{
		antallTimer: 37.5,
		periode: {
			periodeFra: "2015-04-01",
			periodeTil: "2015-04-30"
		},
		rapporteringsperiode: "2015-05"
	},
	{
		antallTimer: 37.5,
		periode: {
			periodeFra: "2015-05-01",
			periodeTil: "2015-05-31"
		},
		rapporteringsperiode: "2015-06"
	},
	{
		antallTimer: 37.5,
		periode: {
			periodeFra: "2016-01-01",
			periodeTil: "2016-01-31"
		},
		rapporteringsperiode: "2016-02"
	}
];
var antallTimerPrUke = 37.5;
var arbeidsavtaler = [
	{
		antallTimerPrUke: 37.5,
		arbeidstidsordning: "Skift",
		beregnetAntallTimerPrUke: 40,
		gyldighetsperiode: {
			periodeFra: "2017-03-01",
			periodeTil: "2017-06-01"
		},
		sisteLoennsendring: "2016-04-16",
		sisteStillingsendring: "1988-10-03",
		stillingsprosent: "100%",
		yrke: "Klovn"
	},
	{
		antallTimerPrUke: 37.5,
		arbeidstidsordning: "Skift",
		beregnetAntallTimerPrUke: 40,
		fartsomraade: "Utenriks",
		gyldighetsperiode: {
			periodeFra: "2017-07-01"
		},
		skipstype: "Annet",
		skipsregister: "Norsk internasjonal skipreise",
		sisteLoennsendring: "2016-12-16",
		sisteStillingsendring: "1988-10-03",
		stillingsprosent: "100%",
		yrke: "Klovn"
	},
	{
		antallTimerPrUke: 37.5,
		arbeidstidsordning: "Skift",
		beregnetAntallTimerPrUke: 40,
		gyldighetsperiode: {
			periodeFra: "2017-06-01",
			periodeTil: "2017-07-01"
		},
		sisteLoennsendring: "2016-12-16",
		sisteStillingsendring: "1988-10-03",
		stillingsprosent: "100%",
		yrke: "Klovn"
	},
	{
		antallTimerPrUke: 37.5,
		arbeidstidsordning: "Skift",
		beregnetAntallTimerPrUke: 40,
		gyldighetsperiode: {
			periodeFra: "2017-02-01",
			periodeTil: "2017-03-01"
		},
		sisteLoennsendring: "2016-12-16",
		sisteStillingsendring: "1988-10-03",
		stillingsprosent: "100%",
		yrke: "Klovn"
	}
];
var arbeidsgiver = {
	orgnavn: "Generisk Firmanavn AS Oslo",
	orgnr: "972165050",
	type: "Organisasjon"
};
var arbeidstidsordning = "Skift";
var beregnetAntallTimerPrUke = 40;
var fartsomraade = "Utenriks";
var gyldighetsperiode = {
	periodeFra: "1988-10-01"
};
var eksternArbeidsforholdId = "1162-20100701-1";
var navArbeidsforholdId = 7597029;
var opplysningspliktigarbeidsgiver = {
	orgnavn: "Generisk Firmanavn AS",
	orgnr: "972165050",
	type: "Organisasjon"
};
var permisjonPermittering = [
	{
		periode: {
			periodeFra: "2014-07-01",
			periodeTil: "2015-12-31"
		},
		permisjonPermitteringId: "123-xyz",
		prosent: 50.5,
		type: "Permisjon med foreldrepenger"
	},
	{
		periode: {
			periodeFra: "2015-01-03",
			periodeTil: "2016-03-26"
		},
		permisjonPermitteringId: "164-xyz",
		prosent: 36.4,
		type: "Velferdspermisjon"
	}
];
var skipstype = "Annet";
var skipsregister = "Norsk internasjonal skipreise";
var sistBekreftet = "2016-12-13T13:59:11.893";
var sisteLoennsendring = "2016-12-16";
var sisteStillingsendring = "1988-10-03";
var stillingsprosent = "100%";
var type = "Ordinært";
var utenlandsopphold = [
	{
		land: "Japan",
		landkode: "JPN",
		periode: {
			periodeFra: "2014-07-01",
			periodeTil: "2015-12-01"
		},
		rapporteringsperiode: "2016-01"
	},
	{
		land: "Spania",
		landkode: "SPN",
		periode: {
			periodeFra: "2015-08-01",
			periodeTil: "2017-12-01"
		},
		rapporteringsperiode: "2017-12"
	},
	{
		land: "Sverige",
		landkode: "SPN",
		periode: {
			periodeFra: "2011-04-01",
			periodeTil: "2011-11-01"
		},
		rapporteringsperiode: "2017-12"
	},
	{
		land: "Portugal",
		landkode: "SPN",
		periode: {
			periodeFra: "2018-01-01",
			periodeTil: "2018-02-01"
		},
		rapporteringsperiode: "2017-12"
	},
	{
		land: "Albania",
		landkode: "SPN",
		periode: {
			periodeFra: "2018-02-01",
			periodeTil: "2018-05-01"
		},
		rapporteringsperiode: "2017-12"
	}
];
var yrke = "Klovn";
var afDetaljert = {
	ansettelsesperiode: ansettelsesperiode,
	antallTimerForTimelonnet: antallTimerForTimelonnet,
	antallTimerPrUke: antallTimerPrUke,
	arbeidsavtaler: arbeidsavtaler,
	arbeidsgiver: arbeidsgiver,
	arbeidstidsordning: arbeidstidsordning,
	beregnetAntallTimerPrUke: beregnetAntallTimerPrUke,
	fartsomraade: fartsomraade,
	gyldighetsperiode: gyldighetsperiode,
	eksternArbeidsforholdId: eksternArbeidsforholdId,
	navArbeidsforholdId: navArbeidsforholdId,
	opplysningspliktigarbeidsgiver: opplysningspliktigarbeidsgiver,
	permisjonPermittering: permisjonPermittering,
	skipstype: skipstype,
	skipsregister: skipsregister,
	sistBekreftet: sistBekreftet,
	sisteLoennsendring: sisteLoennsendring,
	sisteStillingsendring: sisteStillingsendring,
	stillingsprosent: stillingsprosent,
	type: type,
	utenlandsopphold: utenlandsopphold,
	yrke: yrke
};

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _iterableToArrayLimit(arr, i) {
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance");
}

var Environment = function Environment() {
  _classCallCheck(this, Environment);
};

Environment.settEnv = function (miljo) {
  switch (miljo) {
    default:
    case "LOCAL":
      Environment.apiUrl = "http://localhost:8080/person/arbeidsforhold-api";
      Environment.loginUrl = "https://loginservice-q.nav.no/login";
      Environment.logoutUrl = "https://loginservice-q.nav.no/slo";
      break;

    case "Q0":
    case "Q1":
    case "Q6":
      Environment.apiUrl = "https://www-".concat(miljo.toLowerCase(), ".nav.no/person/arbeidsforhold-api");
      Environment.loginUrl = "https://loginservice-q.nav.no/login";
      Environment.logoutUrl = "https://loginservice-q.nav.no/slo";
      break;

    case "PROD":
      Environment.apiUrl = "https://www.nav.no/person/arbeidsforhold-api";
      Environment.loginUrl = "https://loginservice.nav.no/login";
      Environment.logoutUrl = "https://loginservice.nav.no/slo";
      break;
  }
};

var delay = function delay(min, max) {
  return new Promise(function (resolve) {
    setTimeout(resolve, Math.random() * (max - min) + min);
  });
};

var setUpMock = function setUpMock() {
  fetchMock.get("".concat(Environment.apiUrl, "/arbeidsforhold"), delay(250, 1250).then(function () {
    return afListe;
  }));
  fetchMock.get("begin:".concat(Environment.apiUrl, "/arbeidsforholdinnslag"), delay(250, 1250).then(function () {
    return afDetaljert;
  }));
};

var nb = {
  antalltimer: "Antall timer",
  ansettelsesperiode: "Ansettelsesperiode",
  apne: "Åpne",
  arbeidsavtale: "Arbeidsavtale",
  arbeidsforholdid: "Arbeidsforhold ID",
  arbeidstidsordning: "Arbeidstidsordning",
  endretstillingsprosent: "Endret stillingsprosent",
  fartsomraade: "Fartsområde",
  httperror: "Oisann, noe gikk galt ved henting av data!",
  hovedenhet: "Hovedenhet",
  hvisfeil1: "Oversikten viser arbeidsforholdene slik det er rapportert av arbeidsgiver.",
  hvisfeil2: "Hvis det er feil i et arbeidsforhold, kan arbeidsgiveren endre gjennom a-meldingen.",
  ingenarbeidsforhold: "Du har ingen registrerte arbeidsforhold.",
  land: "Land",
  lonnsendring: "Lønnsendring",
  lukke: "Lukk",
  organisasjonsnummer: "Organisasjonsnummer",
  opptjeningsperiode: "Opptjeningsperiode",
  navaerendejobb: "Nåværende jobb",
  periode: "Periode",
  prosent: " Prosent",
  rapporteringsperiode: "Rapporteringsperiode",
  sistbekreftet: "Sist bekreftet av arbeidsgiver",
  sistelonnsendring: "Siste lønnsendring",
  skipsregister: "Skipsregister",
  skipstype: "Skipstype",
  stillingsprosent: "Stillingsprosent",
  tabs: {
    arbeidiutlandet: "Arbeid i utlandet",
    historikk: "Historikk",
    permisjonpermittering: "Permisjon/Permittering",
    timerfortimelonnet: "Timer for timelønnet"
  },
  timerifullstilling: "Timer i full stilling",
  timerperuke: "Timer/uke",
  type: "Type",
  typearbeidsforhold: "Type arbeidsforhold",
  visfaerrearbeidsforhold: "Vis færre arbeidsforhold",
  visflerearbeidsforhold: "Vis flere arbeidsforhold",
  yrke: "Yrke",
  ERKONK: "Arbeidsgiveren har gått konkurs. NAV har satt samme sluttdato som konkursåpningsdato i Konkursregisteret.",
  EROPPH: "Foretaket er opphørt i Enhetsregisteret. NAV har satt samme sluttdato som datoen foretaket opphørte i Enhetsregisteret.",
  ERVIRK: "Foretaket er overdratt til en annen juridisk enhet. NAV har satt  samme sluttdato som datoen da foretaket ble overdratt i Enhetsregisteret.",
  IBARBG: "Arbeidsgiveren har ikke bekreftet arbeidsforholdet. NAV har derfor satt sluttdato til siste dato i den kalendermåneden arbeidsgiveren din sist bekreftet arbeidsforholdet.",
  IBKAOR: "Sluttdato satt av NAV. Arbeidsforholdet er ikke bekreftet gjennom a-ordningen. Sluttdato er satt til 31.12.2014"
};

var en = {
  antalltimer: "Number of hours",
  ansettelsesperiode: "Ansettelsesperiode",
  apne: "Open",
  arbeidsavtale: "Employment",
  arbeidsforholdid: "Emplyment ID",
  arbeidstidsordning: "Working scheme",
  endretstillingsprosent: "Changed position percentage",
  fartsomraade: "Area",
  httperror: "Wops, something went wrong when retrieving data!",
  hovedenhet: "Parent company",
  hvisfeil1: "The overview displays employments reported after 01.01.2015.",
  hvisfeil2: "If something is wrong with the registered information, contact your employer.",
  ingenarbeidsforhold: "You have no registered employments.",
  land: "Country",
  lonnsendring: "Salary changed",
  lukke: "Close",
  organisasjonsnummer: "Organization number",
  opptjeningsperiode: "Worked in period",
  navaerendejobb: "Current employment",
  periode: "Period",
  prosent: " Percentage",
  rapporteringsperiode: "Reported in period",
  sistbekreftet: "Last confirmed by employer",
  sistelonnsendring: "Last salary change",
  skipsregister: "Ship registry",
  skipstype: "Ship type",
  stillingsprosent: "Employment percent",
  tabs: {
    arbeidiutlandet: "Work abroad",
    historikk: "History",
    permisjonpermittering: "Leave/Layoff",
    timerfortimelonnet: "Working hours"
  },
  timerifullstilling: "Hours in full position",
  timerperuke: "Hours/week",
  type: "Type",
  typearbeidsforhold: "Type of employment",
  visfaerrearbeidsforhold: "Show fewer",
  visflerearbeidsforhold: "Show more",
  yrke: "Profession",
  ERKONK: "Sluttdato satt av NAV. Arbeidsgiver har gått konkurs. Sluttdato er samme dato som konkursåpningsdato i Konkursregisteret.",
  EROPPH: "Sluttdato satt av NAV. Arbeidsgiver er opphørt i Enhetsregisteret. Sluttdato er satt til datoen foretaket er opphørt.",
  ERVIRK: "Sluttdato satt av NAV. Foretaket er overdratt til annen juridisk enhet. Sluttdatoen er satt til dato for overdragelse.",
  IBARBG: "Sluttdato satt av NAV. Arbeidsforholdet har ikke blitt bekreftet. Sluttdato er siste dato i kalendermåneden som arbeidsforholdet er bekreftet.",
  IBKAOR: "Sluttdato satt av NAV. Arbeidsforholdet er ikke bekreftet gjennom a-ordningen. Sluttdato er satt til 31.12.2014"
};

var sprak = {
  nb: nb,
  en: en
};

var Error = function Error(props) {
  var error = props.error;
  return React.createElement("div", {
    className: "error__container"
  }, React.createElement(AlertStripe, {
    type: "feil"
  }, sprak[props.locale].httperror, React.createElement("br", null), error && React.createElement("span", null, " ".concat(error.code, ": ").concat(error.text))));
};

var _window = window,
    frontendlogger = _window.frontendlogger;
var logApiError = function logApiError(url, response) {
  var error = "Feil ved henting av data: " + "".concat(url, " - ").concat(response.status, " ").concat(response.statusText);
  var title = "personopplysninger.apiclient.error";
  var tags = {};
  var fields = {
    status: response.status,
    statusText: response.statusText,
    url: url
  };

  if (frontendlogger) {
    frontendlogger.error(error);
    frontendlogger.event(title, fields, tags);
  }
};

var parseJson = function parseJson(data) {
  return data.json();
};

var sendTilLogin = function sendTilLogin() {
  return new Promise(function () {
    return window.location.assign("".concat(Environment.loginUrl, "?redirect=").concat(window.location.href));
  });
};

var sjekkAuth = function sjekkAuth(response) {
  return response.status === 401 || response.status === 403 || response.status === 0 && !response.ok ? sendTilLogin() : response;
};

var sjekkForFeil = function sjekkForFeil(url, response, reject) {
  return response.ok ? response : (logApiError(url, response), reject({
    code: response.status,
    text: response.statusText
  }));
};

var hentJsonOgSjekkAuth = function hentJsonOgSjekkAuth(url) {
  return new Promise(function (resolve, reject) {
    return fetch(url, {
      method: "GET",
      headers: {
        "Content-Type": "application/json;charset=UTF-8"
      },
      credentials: "include"
    }).then(sjekkAuth).then(function (response) {
      return sjekkForFeil(url, response, reject);
    }).then(parseJson).then(resolve)["catch"](reject);
  });
};

var hentListeMedArbeidsforhold = function hentListeMedArbeidsforhold() {
  return hentJsonOgSjekkAuth("".concat(Environment.apiUrl, "/arbeidsforhold"));
};
var hentDetaljertArbeidsforhold = function hentDetaljertArbeidsforhold(id) {
  return hentJsonOgSjekkAuth("".concat(Environment.apiUrl, "/arbeidsforholdinnslag/").concat(id));
};

var Spinner = function Spinner() {
  return React.createElement("div", {
    className: "spinner__wrapper"
  }, React.createElement(NavFrontendSpinner, {
    type: "XL"
  }));
};

var sortDateStringDesc = function sortDateStringDesc(a, b) {
  return a && b ? moment(b).diff(moment(a)) : !a && b ? -1 : a && !b ? 1 : 0;
};
var sortPeriodeFraDesc = function sortPeriodeFraDesc(a, b) {
  return a && b ? sortDateStringDesc(a.periodeFra, b.periodeFra) : 0;
};
var sortPeriodeTilDesc = function sortPeriodeTilDesc(a, b) {
  return a && b ? sortDateStringDesc(a.periodeTil, b.periodeTil) : 0;
};

var NoData = function NoData() {
  return React.createElement("span", null, " ");
};

var parse = function parse(str, data) {
  return str.replace("%s", data.toString());
};

var CheckAndPrint = function CheckAndPrint(props) {
  return props.data ? React.createElement("span", {
    className: props.font
  }, props.format ? parse(props.format, props.data) : props.data) : React.createElement(NoData, null);
};

var CheckDateAndPrint = function CheckDateAndPrint(props) {
  if (!props.data) {
    return React.createElement(NoData, null);
  }

  var date = moment(props.data).format(props.dateFormat || "DD.MM.YYYY");
  var formattedDate = props.format ? parse(props.format, date) : date;
  return React.createElement("span", null, props.maskineltAvsluttet ? React.createElement("span", null, React.createElement("span", null, formattedDate), React.createElement(Hjelpetekst, {
    id: props.maskineltAvsluttet,
    className: "af-date__hjelpetekst"
  }, props.maskineltAvsluttet)) : formattedDate);
};

var CheckPeriodAndPrint = function CheckPeriodAndPrint(props) {
  return props.data ? React.createElement("span", null, React.createElement(CheckDateAndPrint, {
    data: props.data.periodeFra,
    dateFormat: props.format
  }), " - ", props.twoLines && React.createElement("br", null), React.createElement(CheckDateAndPrint, {
    data: props.data.periodeTil,
    dateFormat: props.format,
    maskineltAvsluttet: props.maskineltAvsluttet
  })) : React.createElement(NoData, null);
};

var fnr = function fnr(x) {
  return x.replace(/(?=.{5}$)/, " ");
};

var ArbeidsgiverTittel = function ArbeidsgiverTittel(props) {
  switch (props.arbeidsgiver.type) {
    case "Person":
      return React.createElement(CheckAndPrint, {
        data: fnr(props.arbeidsgiver.fnr),
        font: props.overskrift ? "typo-undertittel" : "typo-element"
      });
      break;

    case "Organisasjon":
      return React.createElement(CheckAndPrint, {
        data: props.arbeidsgiver.orgnavn,
        font: props.overskrift ? "typo-undertittel" : "typo-element"
      });
      break;

    default:
      return null;
  }
};

var ListeTittel = function ListeTittel(props) {
  var foretak = props.foretak,
      _onClick = props.onClick;

  var replaceId = function replaceId(path, id) {
    return path.replace("{id}", id.toString());
  };

  switch (_onClick.type) {
    case "INGEN_ON_CLICK":
      return React.createElement(ArbeidsgiverTittel, {
        arbeidsgiver: foretak.arbeidsgiver
      });

    case "LENKE":
      return React.createElement("a", {
        className: "lenke",
        href: replaceId(_onClick.href, foretak.navArbeidsforholdId)
      }, React.createElement(ArbeidsgiverTittel, {
        arbeidsgiver: foretak.arbeidsgiver
      }));

    case "REACT_ROUTER_LENKE":
      return React.createElement(_onClick.Component, {
        className: "lenke",
        to: replaceId(_onClick.to, foretak.navArbeidsforholdId)
      }, React.createElement(ArbeidsgiverTittel, {
        arbeidsgiver: foretak.arbeidsgiver
      }));

    case "KNAPP":
      return React.createElement("button", {
        className: "lenke af-liste__knapp",
        onClick: function onClick() {
          return _onClick.getId(foretak.navArbeidsforholdId);
        }
      }, React.createElement(ArbeidsgiverTittel, {
        arbeidsgiver: foretak.arbeidsgiver
      }));
  }
};

var Arbeidsforhold = function Arbeidsforhold(props) {
  var arbeidsforhold = props.arbeidsforhold,
      onClick = props.onClick;

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      visAlle = _useState2[0],
      settVisAlle = _useState2[1];

  var toggleVisAlle = function toggleVisAlle() {
    return settVisAlle(!visAlle);
  };

  var sorterteArbeidsforhold = arbeidsforhold.sort(function (a, b) {
    return sortPeriodeFraDesc(a.ansettelsesperiode.periode, b.ansettelsesperiode.periode);
  }).sort(function (a, b) {
    return sortPeriodeTilDesc(a.ansettelsesperiode.periode, b.ansettelsesperiode.periode);
  });
  return React.createElement("div", {
    className: "af-liste__container"
  }, React.createElement("div", {
    className: "af-liste__table"
  }, sorterteArbeidsforhold.length > 0 ? sorterteArbeidsforhold.slice(0, visAlle ? arbeidsforhold.length : 5).map(function (foretak, counter) {
    return React.createElement("div", {
      className: "af-liste__flex-rad",
      key: "".concat(foretak.arbeidsforholdId, "-").concat(counter)
    }, React.createElement("div", {
      className: "af-liste__flex-innhold"
    }, React.createElement("div", {
      className: "af-liste__tekst"
    }, React.createElement(ListeTittel, {
      foretak: foretak,
      onClick: onClick
    })), React.createElement("div", {
      className: "af-liste__tekst"
    }, React.createElement(CheckAndPrint, {
      data: foretak.yrke,
      font: "typo-normal"
    })), React.createElement("div", {
      className: "af-liste__tekst typo-normal"
    }, React.createElement(CheckPeriodAndPrint, {
      data: foretak.ansettelsesperiode.periode,
      maskineltAvsluttet: foretak.ansettelsesperiode.varslingskode ? sprak[props.locale][foretak.ansettelsesperiode.varslingskode] : null
    }))));
  }) : React.createElement("div", {
    className: "af-liste__flex-rad"
  }, React.createElement(Normaltekst, null, sprak[props.locale].ingenarbeidsforhold))), arbeidsforhold.length > 5 && React.createElement("button", {
    className: "af-liste__vis-flere lenke",
    onClick: toggleVisAlle,
    "aria-expanded": visAlle
  }, visAlle ? React.createElement(Normaltekst, null, sprak[props.locale].visfaerrearbeidsforhold, " ", React.createElement(OppChevron, null)) : React.createElement(Normaltekst, null, sprak[props.locale].visflerearbeidsforhold, " ", React.createElement(NedChevron, null))));
};

// sessionStorage pga sensitive data

var persistState = {
  status: "LOADING"
};

var ListeMedArbeidsforhold = function ListeMedArbeidsforhold(props) {
  var locale = props.locale;

  var _useState = useState(persistState),
      _useState2 = _slicedToArray(_useState, 2),
      state = _useState2[0],
      setState = _useState2[1];

  useEffect(function () {
    Environment.settEnv(props.miljo);
    moment.locale(locale);
  }, [locale]);
  useEffect(function () {
    if (state.status === "LOADING") {
      hentListeMedArbeidsforhold().then(function (arbeidsforhold) {
        return setState({
          status: "RESULT",
          arbeidsforhold: arbeidsforhold
        });
      })["catch"](function (error) {
        return setState({
          status: "ERROR",
          error: error
        });
      });
    }

    return function () {
      persistState = state;
    };
  }, [state]);

  switch (state.status) {
    case "LOADING":
      return React.createElement(Spinner, null);

    case "RESULT":
      return React.createElement(Arbeidsforhold, _extends({
        arbeidsforhold: state.arbeidsforhold
      }, props));

    case "ERROR":
      return React.createElement(Error, {
        error: state.error,
        locale: props.locale
      });
  }
};

var CheckAndPrintBox = function CheckAndPrintBox(props) {
  return props.data ? React.createElement("div", {
    className: "af-detaljert__boks"
  }, React.createElement(Element, null, props.title), React.createElement(Normaltekst, null, props.date ? React.createElement(CheckDateAndPrint, {
    data: props.data,
    format: props.format
  }) : React.createElement(CheckAndPrint, {
    data: props.data,
    format: props.format
  })), props.children) : null;
};

var ArbeidsavtaleFelter = function ArbeidsavtaleFelter(props) {
  var locale = props.locale,
      data = props.data;
  return React.createElement(React.Fragment, null, React.createElement(CheckAndPrintBox, {
    title: sprak[locale].arbeidstidsordning,
    data: data.arbeidstidsordning
  }), React.createElement(CheckAndPrintBox, {
    title: sprak[locale].sistelonnsendring,
    data: data.sisteLoennsendring,
    date: true
  }), React.createElement(CheckAndPrintBox, {
    title: sprak[locale].stillingsprosent,
    data: data.stillingsprosent
  }, React.createElement(Normaltekst, null, React.createElement(CheckDateAndPrint, {
    data: data.sisteStillingsendring,
    format: "(".concat(sprak[locale].endretstillingsprosent, " %s)")
  }))), React.createElement(CheckAndPrintBox, {
    title: sprak[locale].timerperuke,
    data: data.antallTimerPrUke
  }), React.createElement(CheckAndPrintBox, {
    title: sprak[locale].skipsregister,
    data: data.skipsregister
  }), React.createElement(CheckAndPrintBox, {
    title: sprak[locale].skipstype,
    data: data.skipstype
  }), React.createElement(CheckAndPrintBox, {
    title: sprak[locale].fartsomraade,
    data: data.fartsomraade
  }));
};

var Historikk = function Historikk(props) {
  var locale = props.locale;
  props.arbeidsavtaler.sort(function (left, right) {
    return sortPeriodeFraDesc(left.gyldighetsperiode, right.gyldighetsperiode);
  }).sort(function (left, right) {
    return sortPeriodeTilDesc(left.gyldighetsperiode, right.gyldighetsperiode);
  });

  var _useState = useState(props.arbeidsavtaler.map(function (arbeidsavtale) {
    return {
      arbeidsavtale: arbeidsavtale,
      ekspandert: false
    };
  })),
      _useState2 = _slicedToArray(_useState, 2),
      data = _useState2[0],
      setData = _useState2[1];

  return React.createElement("div", {
    className: "af-detaljert__tabs-innhold af-detaljert__flex-table"
  }, React.createElement("div", {
    className: "af-detaljert__flex-rad af-detaljert__head"
  }, React.createElement("div", {
    className: "af-detaljert__flex-kolonne"
  }, React.createElement(Element, null, sprak[locale].yrke)), React.createElement("div", {
    className: "af-detaljert__flex-kolonne"
  }, React.createElement(Element, null, sprak[locale].periode)), React.createElement("div", {
    className: "af-detaljert__flex-kolonne"
  })), data.map(function (innslag, counter) {
    var arbeidsavtale = innslag.arbeidsavtale,
        ekspandert = innslag.ekspandert;

    var onClick = function onClick() {
      return setData(data.map(function (values, i) {
        return i === counter ? Object.assign({}, values, {
          ekspandert: !data[i].ekspandert
        }) : values;
      }));
    };

    return React.createElement(Fragment, {
      key: counter
    }, React.createElement("div", {
      className: "af-detaljert__flex-rad",
      key: counter
    }, React.createElement("div", {
      className: "af-detaljert__flex-kolonne af-detaljert__heading"
    }, React.createElement(CheckAndPrint, {
      data: arbeidsavtale.yrke
    })), React.createElement("div", {
      className: "af-detaljert__flex-kolonne"
    }, React.createElement(CheckPeriodAndPrint, {
      data: arbeidsavtale.gyldighetsperiode
    })), React.createElement("div", {
      className: "af-detaljert__flex-kolonne af-liste__ekspander",
      onClick: onClick
    }, !ekspandert ? React.createElement("span", null, sprak[locale].apne, " ", React.createElement(NedChevron, null)) : React.createElement("span", null, sprak[locale].lukke, " ", React.createElement(OppChevron, null)))), ekspandert && React.createElement("div", {
      className: "af-detaljert__flex-rad"
    }, React.createElement("div", {
      className: "af-detaljert__flex-kolonne"
    }, React.createElement("div", {
      className: "af-detaljert__innhold"
    }, React.createElement(ArbeidsavtaleFelter, {
      locale: locale,
      data: arbeidsavtale
    })))));
  }));
};

var Permisjon = function Permisjon(props) {
  var locale = props.locale;
  props.permisjoner.sort(function (left, right) {
    return sortPeriodeFraDesc(left.periode, right.periode);
  });
  return React.createElement("div", {
    className: "af-detaljert__tabs-innhold af-detaljert__flex-table"
  }, React.createElement("div", {
    className: "af-detaljert__flex-rad af-detaljert__head"
  }, React.createElement("div", {
    className: "af-detaljert__flex-kolonne"
  }, React.createElement(Element, null, sprak[locale].type)), React.createElement("div", {
    className: "af-detaljert__flex-kolonne"
  }, React.createElement(Element, null, sprak[locale].periode)), React.createElement("div", {
    className: "af-detaljert__flex-kolonne"
  }, React.createElement(Element, null, sprak[locale].prosent))), props.permisjoner.map(function (permisjon, i) {
    return React.createElement("div", {
      className: "af-detaljert__flex-rad",
      key: "".concat(permisjon.permisjonPermitteringId, "-").concat(i)
    }, React.createElement("div", {
      className: "af-detaljert__flex-kolonne af-detaljert__heading"
    }, permisjon.type), React.createElement("div", {
      className: "af-detaljert__flex-kolonne"
    }, React.createElement(CheckPeriodAndPrint, {
      data: permisjon.periode
    })), React.createElement("div", {
      className: "af-detaljert__flex-kolonne"
    }, permisjon.prosent));
  }));
};

var Timer = function Timer(props) {
  var locale = props.locale;
  props.timer.sort(function (left, right) {
    return sortPeriodeFraDesc(left.periode, right.periode);
  });
  var initState = {};
  props.timer.map(function (timerObjekt, i) {
    var year = moment(timerObjekt.rapporteringsperiode).year();

    if (!initState[year]) {
      initState[year] = {
        timerObjekt: [timerObjekt],
        ekspandert: !i ? true : false
      };
    } else {
      initState[year].timerObjekt.push(timerObjekt);
    }
  });

  var _useState = useState(initState),
      _useState2 = _slicedToArray(_useState, 2),
      data = _useState2[0],
      setData = _useState2[1];

  return React.createElement("div", {
    className: "af-detaljert__tabs-innhold af-detaljert__flex-table"
  }, React.createElement("div", {
    className: "af-detaljert__flex-rad af-detaljert__head"
  }, React.createElement("div", {
    className: "af-detaljert__flex-kolonne af-detaljert__rapporteringsperiode"
  }, React.createElement(Element, null, sprak[locale].rapporteringsperiode)), React.createElement("div", {
    className: "af-detaljert__flex-kolonne"
  }, React.createElement(Element, null, sprak[locale].opptjeningsperiode)), React.createElement("div", {
    className: "af-detaljert__flex-kolonne"
  }, React.createElement(Element, null, sprak[locale].antalltimer))), Object.keys(data).reverse().map(function (year) {
    var value = data[year];

    var onClick = function onClick() {
      return setData(Object.assign({}, data, _defineProperty({}, year, Object.assign({}, data[year], {
        ekspandert: !data[year].ekspandert
      }))));
    };

    return React.createElement(Fragment, {
      key: year
    }, React.createElement("div", {
      className: "af-detaljert__flex-rad",
      key: year
    }, React.createElement("div", {
      className: "af-detaljert__flex-kolonne af-liste__ekspander",
      onClick: onClick
    }, year, " ", value.ekspandert ? React.createElement(OppChevron, null) : React.createElement(NedChevron, null)), React.createElement("div", null)), value.ekspandert && value.timerObjekt.map(function (time, i) {
      return React.createElement("div", {
        className: "af-detaljert__flex-rad",
        key: "".concat(i)
      }, React.createElement("div", {
        className: "af-detaljert__flex-kolonne af-liste__month af-detaljert__heading"
      }, time.periode && React.createElement(CheckDateAndPrint, {
        data: time.rapporteringsperiode,
        dateFormat: "MMMM"
      })), React.createElement("div", {
        className: "af-detaljert__flex-kolonne"
      }, React.createElement(CheckPeriodAndPrint, {
        data: time.periode
      })), React.createElement("div", {
        className: "af-detaljert__flex-kolonne"
      }, React.createElement(CheckAndPrint, {
        data: time.antallTimer
      })));
    }));
  }));
};

var Utenlandsopphold = function Utenlandsopphold(props) {
  var locale = props.locale;
  props.utenlandsopphold.sort(function (left, right) {
    return sortPeriodeFraDesc(left.periode, right.periode);
  });
  var initState = {};
  props.utenlandsopphold.map(function (opphold, i) {
    var year = moment(opphold.periode.periodeFra).year();

    if (!initState[year]) {
      initState[year] = {
        opphold: [opphold],
        ekspandert: !i ? true : false
      };
    } else {
      initState[year].opphold.push(opphold);
    }
  });

  var _useState = useState(initState),
      _useState2 = _slicedToArray(_useState, 2),
      data = _useState2[0],
      setData = _useState2[1];

  return React.createElement("div", {
    className: "af-detaljert__tabs-innhold af-detaljert__flex-table"
  }, React.createElement("div", {
    className: "af-detaljert__flex-rad af-detaljert__head"
  }, React.createElement("div", {
    className: "af-detaljert__flex-kolonne"
  }, React.createElement(Element, null, sprak[locale].periode)), React.createElement("div", {
    className: "af-detaljert__flex-kolonne"
  }), React.createElement("div", {
    className: "af-detaljert__flex-kolonne"
  }, React.createElement(Element, null, sprak[locale].land))), Object.keys(data).reverse().map(function (year) {
    var value = data[year];

    var onClick = function onClick() {
      return setData(Object.assign({}, data, _defineProperty({}, year, Object.assign({}, data[year], {
        ekspandert: !data[year].ekspandert
      }))));
    };

    return React.createElement(Fragment, {
      key: year
    }, React.createElement("div", {
      className: "af-detaljert__flex-rad",
      key: year
    }, React.createElement("div", {
      className: "af-detaljert__flex-kolonne af-liste__ekspander",
      onClick: onClick
    }, year, " ", value.ekspandert ? React.createElement(OppChevron, null) : React.createElement(NedChevron, null)), React.createElement("div", null)), value.ekspandert && value.opphold.map(function (time, i) {
      return React.createElement("div", {
        className: "af-detaljert__flex-rad",
        key: "".concat(i)
      }, React.createElement("div", {
        className: "af-detaljert__flex-kolonne af-liste__month  af-detaljert__heading"
      }, React.createElement(CheckDateAndPrint, {
        data: time.periode.periodeFra,
        dateFormat: "MMMM"
      })), React.createElement("div", {
        className: "af-detaljert__flex-kolonne"
      }, React.createElement(CheckPeriodAndPrint, {
        data: time.periode
      })), React.createElement("div", {
        className: "af-detaljert__flex-kolonne"
      }, React.createElement(CheckAndPrint, {
        data: time.land
      })));
    }));
  }));
};

var orgnr = function orgnr(x) {
  return x.replace(/(?=.{3}$)/, " ").replace(/(?=.{7}$)/, " ");
};

var Arbeidsforhold$1 = function Arbeidsforhold(props) {
  var arbeidsforhold = props.arbeidsforhold,
      locale = props.locale;
  var arbeidsavtaler = arbeidsforhold.arbeidsavtaler,
      permisjonPermittering = arbeidsforhold.permisjonPermittering;
  var antallTimerForTimelonnet = arbeidsforhold.antallTimerForTimelonnet,
      utenlandsopphold = arbeidsforhold.utenlandsopphold;
  var tabs = [];

  if (antallTimerForTimelonnet && antallTimerForTimelonnet.length > 0) {
    tabs.push({
      label: sprak[locale].tabs.timerfortimelonnet
    });
  }

  if (permisjonPermittering && permisjonPermittering.length > 0) {
    tabs.push({
      label: sprak[locale].tabs.permisjonpermittering
    });
  }

  if (utenlandsopphold && utenlandsopphold.length > 0) {
    tabs.push({
      label: sprak[locale].tabs.arbeidiutlandet
    });
  }

  if (arbeidsavtaler && arbeidsavtaler.length > 0) {
    tabs.push({
      label: sprak[locale].tabs.historikk
    });
  }

  var _useState = useState(tabs.length > 0 ? tabs[0].label : "Ugyldig tab"),
      _useState2 = _slicedToArray(_useState, 2),
      visTab = _useState2[0],
      settVisTab = _useState2[1];

  var selectOnClick = function selectOnClick(event) {
    return settVisTab(event.currentTarget.value);
  };

  return React.createElement("div", {
    className: "af-detaljert__container"
  }, React.createElement("div", {
    className: "af-detaljert__header"
  }, React.createElement("div", {
    className: "af-detaljert__kolonne"
  }, React.createElement("div", {
    className: "af-detaljert__arbeidsgiver"
  }, React.createElement(Undertittel, null, React.createElement(ArbeidsgiverTittel, {
    overskrift: true,
    arbeidsgiver: arbeidsforhold.arbeidsgiver
  })), arbeidsforhold.arbeidsgiver.type === "Organisasjon" && React.createElement("div", {
    className: "af-detaljert__orgnr"
  }, React.createElement(Normaltekst, null, React.createElement(CheckAndPrint, {
    data: orgnr(arbeidsforhold.arbeidsgiver.orgnr),
    format: "".concat(sprak[locale].organisasjonsnummer, " %s")
  }))))), arbeidsforhold.ansettelsesperiode && React.createElement("div", {
    className: "af-detaljert__kolonne af-detaljert__periode"
  }, React.createElement("div", {
    className: "af-detaljert__arbeidsgiver"
  }, React.createElement(Undertittel, null, React.createElement("span", {
    className: "typo-element"
  }, sprak[locale].ansettelsesperiode)), React.createElement("div", {
    className: "af-detaljert__orgnr"
  }, React.createElement(Normaltekst, null, React.createElement(CheckPeriodAndPrint, {
    data: arbeidsforhold.ansettelsesperiode.periode
  })))))), React.createElement("hr", null), React.createElement("div", {
    className: "af-detaljert__innhold"
  }, arbeidsforhold.opplysningspliktigarbeidsgiver.type === "Organisasjon" && React.createElement(CheckAndPrintBox, {
    title: sprak[locale].hovedenhet,
    data: arbeidsforhold.opplysningspliktigarbeidsgiver.orgnavn
  }, React.createElement(Normaltekst, null, React.createElement(CheckAndPrint, {
    data: orgnr(arbeidsforhold.opplysningspliktigarbeidsgiver.orgnr),
    format: "".concat(sprak[locale].organisasjonsnummer, " %s")
  }))), React.createElement(CheckAndPrintBox, {
    title: sprak[locale].yrke,
    data: arbeidsforhold.yrke
  }), React.createElement(CheckAndPrintBox, {
    title: sprak[locale].typearbeidsforhold,
    data: arbeidsforhold.type
  }), React.createElement(CheckAndPrintBox, {
    title: sprak[locale].arbeidsforholdid,
    data: arbeidsforhold.eksternArbeidsforholdId
  }), React.createElement(ArbeidsavtaleFelter, {
    locale: locale,
    data: arbeidsforhold
  }), React.createElement(CheckAndPrintBox, {
    title: sprak[locale].sistbekreftet,
    data: arbeidsforhold.sistBekreftet,
    date: true
  })), tabs.length > 0 && React.createElement(React.Fragment, null, React.createElement("div", {
    className: "af-detaljert__tabs"
  }, React.createElement(Tabs, {
    tabs: tabs,
    onChange: function onChange(_event, index) {
      return settVisTab(tabs[index].label);
    }
  })), React.createElement("div", {
    className: "af-detaljert__select"
  }, React.createElement("hr", {
    className: "af-detaljert__hr"
  }), tabs.length > 1 ? React.createElement(Select, {
    label: "",
    onChange: selectOnClick
  }, tabs.map(function (tab) {
    return React.createElement("option", {
      key: tab.label,
      value: tab.label
    }, tab.label);
  })) : React.createElement(Element, null, tabs[0].label)), function () {
    switch (visTab) {
      case sprak[locale].tabs.timerfortimelonnet:
        return React.createElement(Timer, {
          timer: antallTimerForTimelonnet,
          locale: locale
        });

      case sprak[locale].tabs.permisjonpermittering:
        return React.createElement(Permisjon, {
          permisjoner: permisjonPermittering,
          locale: locale
        });

      case sprak[locale].tabs.arbeidiutlandet:
        return React.createElement(Utenlandsopphold, {
          utenlandsopphold: utenlandsopphold,
          locale: locale
        });

      case sprak[locale].tabs.historikk:
        return React.createElement(Historikk, {
          arbeidsavtaler: arbeidsavtaler,
          locale: locale
        });

      default:
        return null;
    }
  }()), React.createElement(AlertStripeInfo, null, sprak[locale].hvisfeil1, React.createElement("br", null), sprak[locale].hvisfeil2));
};

var DetaljertArbeidsforhold = function DetaljertArbeidsforhold(props) {
  var locale = props.locale;

  var _useState = useState({
    status: "READY"
  }),
      _useState2 = _slicedToArray(_useState, 2),
      state = _useState2[0],
      setState = _useState2[1];

  useEffect(function () {
    Environment.settEnv(props.miljo);
    moment.locale(locale);
  }, [locale]);
  useEffect(function () {
    if (props.navArbeidsforholdId) {
      setState({
        status: "LOADING"
      });
      hentDetaljertArbeidsforhold(props.navArbeidsforholdId).then(function (arbeidsforhold) {
        return setState({
          status: "RESULT",
          arbeidsforhold: arbeidsforhold
        });
      })["catch"](function (error) {
        return setState({
          status: "ERROR",
          error: error
        });
      });
    }
  }, [props.navArbeidsforholdId]);

  switch (state.status) {
    case "READY":
      return null;

    case "LOADING":
      return React.createElement(Spinner, null);

    case "RESULT":
      return React.createElement(Arbeidsforhold$1, _extends({
        arbeidsforhold: state.arbeidsforhold
      }, props));

    case "ERROR":
      return React.createElement(Error, {
        error: state.error,
        locale: locale
      });
  }
};

if (process.env.NODE_ENV === "development") {
  Environment.settEnv("LOCAL");
  setUpMock();
}

export default ListeMedArbeidsforhold;
export { DetaljertArbeidsforhold, ListeMedArbeidsforhold };
//# sourceMappingURL=index.es.js.map
