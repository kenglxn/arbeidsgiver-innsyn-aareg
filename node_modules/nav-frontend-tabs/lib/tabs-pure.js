"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var cn = require("classnames");
var nav_frontend_js_utils_1 = require("nav-frontend-js-utils");
var tab_1 = require("./tab");
var tabsCls = function tabsCls(props) {
    return cn('nav-frontend-tabs', props.className, {
        'nav-frontend-tabs--kompakt': props.kompakt
    });
};

var TabsPure = function (_React$PureComponent) {
    _inherits(TabsPure, _React$PureComponent);

    function TabsPure() {
        _classCallCheck(this, TabsPure);

        var _this = _possibleConstructorReturn(this, (TabsPure.__proto__ || Object.getPrototypeOf(TabsPure)).apply(this, arguments));

        _this.aktivIndex = 0;
        _this.focusIndex = 0;
        _this.linkRefs = [];
        _this.handleClick = function (e, index, customClickHandler) {
            e.preventDefault();
            if (typeof _this.props.onChange === 'function') _this.props.onChange(e, index);
            if (typeof customClickHandler === 'function') customClickHandler(e, index);
        };
        _this.handleKeyDown = function (e) {
            var newIndex = void 0;
            var modifier = !_this.props.arrowKeysAutoSwitchTabs ? _this.focusIndex : _this.aktivIndex;
            var keyCode = e.keyCode || e.which;
            switch (keyCode) {
                case nav_frontend_js_utils_1.keyCodes.right:
                    newIndex = modifier < _this.getNumTabs() - 1 ? modifier + 1 : 0;
                    break;
                case nav_frontend_js_utils_1.keyCodes.left:
                    newIndex = modifier > 0 ? modifier - 1 : _this.getNumTabs() - 1;
                    break;
            }
            if (newIndex === undefined) return;
            if (!_this.props.arrowKeysAutoSwitchTabs) {
                _this.linkRefs[newIndex].focus();
            } else {
                if (typeof _this.props.onChange === 'function') _this.props.onChange(e, newIndex);
            }
        };
        return _this;
    }

    _createClass(TabsPure, [{
        key: "getNumTabs",
        value: function getNumTabs() {
            if (this.props.children) return React.Children.count(this.props.children);
            return this.props.tabs ? this.props.tabs.length : 0;
        }
    }, {
        key: "renderTabs",
        value: function renderTabs() {
            var _this2 = this;

            if (this.props.children) {
                return React.Children.map(this.props.children, function (child, i) {
                    if (React.isValidElement(child)) {
                        var aktiv = child.props['aktiv'];
                        if (aktiv) _this2.aktivIndex = i;
                        return React.cloneElement(child, {
                            onClick: function onClick(e) {
                                return _this2.handleClick(e, i, child.props['onClick']);
                            },
                            onKeyDown: function onKeyDown(e) {
                                return _this2.handleKeyDown(e);
                            },
                            linkRef: function linkRef(button) {
                                return _this2.linkRefs[i] = button;
                            },
                            onFocus: function onFocus() {
                                return _this2.focusIndex = i;
                            }
                        });
                    }
                });
            }
            if (this.props.tabs) {
                return this.props.tabs.map(function (tab, i) {
                    if (tab.aktiv) _this2.aktivIndex = i;
                    return React.createElement(tab_1.default, Object.assign({ key: nav_frontend_js_utils_1.guid(), onClick: function onClick(e) {
                            return _this2.handleClick(e, i, tab.onClick);
                        }, onKeyDown: function onKeyDown(e) {
                            return _this2.handleKeyDown(e);
                        }, linkRef: function linkRef(button) {
                            return _this2.linkRefs[i] = button;
                        }, onFocus: function onFocus() {
                            return _this2.focusIndex = i;
                        } }, tab));
                });
            }
        }
    }, {
        key: "render",
        value: function render() {
            var domProps = nav_frontend_js_utils_1.omit(this.props, 'children', 'className', 'tabs', 'kompakt', 'arrowKeysAutoSwitchTabs');
            return React.createElement("div", Object.assign({ className: tabsCls(this.props) }, domProps), React.createElement("ul", { className: "nav-frontend-tabs__tab-list", role: "tablist" }, this.renderTabs()));
        }
    }]);

    return TabsPure;
}(React.PureComponent);

TabsPure.Tab = tab_1.default;
TabsPure.defaultProps = {
    kompakt: false,
    arrowKeysAutoSwitchTabs: true
};
exports.default = TabsPure;
TabsPure.__docgenInfo = {"description":"","displayName":"TabsPure","props":{"tabs":{"defaultValue":null,"description":"Array av tabs, se `tab.tsx`","name":"tabs","required":false,"type":{"name":"TabProps[]"}},"kompakt":{"defaultValue":{"value":"false"},"description":"Rendre mindre, sekundær versjon","name":"kompakt","required":false,"type":{"name":"boolean"}},"arrowKeysAutoSwitchTabs":{"defaultValue":{"value":"true"},"description":"Bestemmer om piltaster skal auto-switche aktiv tab eller om de bare flytter fokus","name":"arrowKeysAutoSwitchTabs","required":false,"type":{"name":"boolean"}},"onChange":{"defaultValue":null,"description":"Valgfri callback som kjøres når state endrer seg etter click","name":"onChange","required":false,"type":{"name":"(event: SyntheticEvent<EventTarget>, index: number) => void"}}}}