"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var classNames = require("classnames");
var PT = require("prop-types");
require("nav-frontend-snakkeboble-style");
var nav_frontend_paneler_1 = require("nav-frontend-paneler");
var nav_frontend_typografi_1 = require("nav-frontend-typografi");
var snakkebobleCls = function snakkebobleCls(hoyre) {
  return classNames('snakkeboble', {
    'snakkeboble--hoyre': hoyre, 'snakkeboble--venstre': !hoyre
  });
};
/**
 * En snakkeboble for dialog
 */

var Snakkeboble = function (_React$Component) {
  _inherits(Snakkeboble, _React$Component);

  function Snakkeboble() {
    _classCallCheck(this, Snakkeboble);

    return _possibleConstructorReturn(this, (Snakkeboble.__proto__ || Object.getPrototypeOf(Snakkeboble)).apply(this, arguments));
  }

  _createClass(Snakkeboble, [{
    key: "render",
    value: function render() {
      var _props = this.props,
          dato = _props.dato,
          topp = _props.topp,
          children = _props.children,
          pilHoyre = _props.pilHoyre,
          ikonClass = _props.ikonClass;

      var toppTekst = topp || dato;
      return React.createElement("div", { className: snakkebobleCls(pilHoyre) }, React.createElement("i", { className: ikonClass }), React.createElement("div", { className: "snakkeboble__snakkeboble-pil-container" }, React.createElement("i", { className: "snakkeboble__snakkebole-pil" })), React.createElement(nav_frontend_paneler_1.Panel, { className: "snakkeboble-panel" }, toppTekst && React.createElement(nav_frontend_typografi_1.Undertekst, { className: "snakkeboble-panel__topp" }, toppTekst), React.createElement("div", { className: "snakkeboble-panel__tekst" }, children)));
    }
  }]);

  return Snakkeboble;
}(React.Component);

Snakkeboble.defaultProps = {
  /**
   * Default er at pilen peker mot venstre
   */
  pilHoyre: false,
  /**
   * Gir enkel default styling på ikoner
   */
  ikonClass: 'snakkeboble__ikon',
  /**
   * @Deprecated Bruk `topp`-prop
   */
  dato: null
};
Snakkeboble.propTypes = {
  /**
   * Toppteksten (tittel) for meldingen
   */
  topp: PT.string,
  /**
   * @Deprecated Dato for melding, bruk `topp`
   */
  dato: PT.string,
  /**
   * Tekst for melding
   */
  children: PT.node.isRequired,
  /**
   * Settes denne peker pilen til snakkeboblen mot høyre, og snakkeboblen og teksten i snakkeboblen flyter mot høyre.
   */
  pilHoyre: PT.bool,
  /**
   * Klasse som brukes på ikonet. Dette lar deg styre form, farge og illustrasjon.
   */
  ikonClass: PT.string
};
exports.default = Snakkeboble;
Snakkeboble.__docgenInfo = {"description":"En snakkeboble for dialog","displayName":"Snakkeboble","props":{"children":{"defaultValue":null,"description":"Tekst for melding","name":"children","required":true,"type":{"name":"string | number | boolean | {} | ReactElement<any> | ReactNodeArray | ReactPortal | ReactChildren..."}},"dato":{"defaultValue":null,"description":"@Deprecated Dato for melding, bruk `topp`","name":"dato","required":false,"type":{"name":"string"}},"topp":{"defaultValue":null,"description":"Toppteksten (tittel) for meldingen","name":"topp","required":false,"type":{"name":"string"}},"pilHoyre":{"defaultValue":null,"description":"Settes denne peker pilen til snakkeboblen mot høyre, og snakkeboblen og teksten i snakkeboblen flyter mot høyre.","name":"pilHoyre","required":false,"type":{"name":"boolean"}},"ikonClass":{"defaultValue":null,"description":"Klasse som brukes på ikonet. Dette lar deg styre form, farge og illustrasjon.","name":"ikonClass","required":false,"type":{"name":"string"}}}}