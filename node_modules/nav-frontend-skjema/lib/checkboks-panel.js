"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var classNames = require("classnames");
var nav_frontend_js_utils_1 = require("nav-frontend-js-utils");
require("nav-frontend-skjema-style");

var CheckboksPanel = function (_React$Component) {
    _inherits(CheckboksPanel, _React$Component);

    function CheckboksPanel(props) {
        _classCallCheck(this, CheckboksPanel);

        var _this = _possibleConstructorReturn(this, (CheckboksPanel.__proto__ || Object.getPrototypeOf(CheckboksPanel)).call(this, props));

        _this.handleChange = function (e) {
            _this.setState({ checked: e.target.checked });
            if (typeof _this.props.onChange === 'function') _this.props.onChange(e);
        };
        _this.state = { hasFocus: false, checked: _this.props.checked };
        return _this;
    }

    _createClass(CheckboksPanel, [{
        key: "componentWillReceiveProps",
        value: function componentWillReceiveProps(newProps) {
            this.setState({ checked: newProps.checked });
        }
    }, {
        key: "toggleOutline",
        value: function toggleOutline() {
            this.setState({ hasFocus: !this.state.hasFocus });
        }
    }, {
        key: "render",
        value: function render() {
            var _this2 = this;

            var _props = this.props,
                id = _props.id,
                label = _props.label,
                subtext = _props.subtext,
                inputProps = _props.inputProps,
                disabled = _props.disabled;
            var _state = this.state,
                hasFocus = _state.hasFocus,
                checked = _state.checked;

            var inputId = id || nav_frontend_js_utils_1.guid();
            var cls = classNames('inputPanel checkboksPanel', {
                'inputPanel--checked': checked && !disabled,
                'inputPanel--focused': hasFocus && !disabled,
                'inputPanel--disabled': disabled === true
            });
            return React.createElement("label", { className: cls, htmlFor: inputId }, React.createElement("input", Object.assign({}, inputProps, { id: inputId, className: "inputPanel__field", type: "checkbox", checked: checked, "aria-checked": checked, disabled: disabled, onFocus: function onFocus() {
                    return _this2.toggleOutline();
                }, onBlur: function onBlur() {
                    return _this2.toggleOutline();
                }, onChange: this.handleChange })), React.createElement("span", { className: "inputPanel__label" }, label), subtext && React.createElement("span", { className: "inputPanel__subtext" }, subtext));
        }
    }]);

    return CheckboksPanel;
}(React.Component);

exports.CheckboksPanel = CheckboksPanel;
exports.default = CheckboksPanel;
CheckboksPanel.__docgenInfo = {"description":"","displayName":"CheckboksPanel","props":{}}