"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var PT = require("prop-types");
var classNames = require("classnames");
require("nav-frontend-skjema-style");
var _1 = require("./");
var skjemaelement_feilmelding_1 = require("./skjemaelement-feilmelding");
var checkboks_panel_1 = require("./checkboks-panel");

var CheckboksPanelGruppe = function (_React$Component) {
    _inherits(CheckboksPanelGruppe, _React$Component);

    function CheckboksPanelGruppe() {
        _classCallCheck(this, CheckboksPanelGruppe);

        return _possibleConstructorReturn(this, (CheckboksPanelGruppe.__proto__ || Object.getPrototypeOf(CheckboksPanelGruppe)).apply(this, arguments));
    }

    _createClass(CheckboksPanelGruppe, [{
        key: "render",
        value: function render() {
            var _props = this.props,
                checkboxes = _props.checkboxes,
                legend = _props.legend,
                feil = _props.feil,
                _onChange = _props.onChange,
                className = _props.className,
                other = _objectWithoutProperties(_props, ["checkboxes", "legend", "feil", "onChange", "className"]);

            return React.createElement(_1.SkjemaGruppe, Object.assign({ className: classNames('inputPanelGruppe', className), feil: feil }, other), React.createElement(_1.Fieldset, { legend: legend }, React.createElement("div", { className: "inputPanelGruppe__inner" }, checkboxes.map(function (checkbox) {
                return React.createElement(checkboks_panel_1.CheckboksPanel, Object.assign({ key: "" + checkbox.id + checkbox.label, onChange: function onChange(event) {
                        return _onChange(event, checkbox.value);
                    } }, checkbox));
            }))));
        }
    }]);

    return CheckboksPanelGruppe;
}(React.Component);

CheckboksPanelGruppe.propTypes = {
    checkboxes: PT.array.isRequired,
    legend: PT.node.isRequired,
    onChange: PT.func.isRequired,
    feil: skjemaelement_feilmelding_1.skjemaelementFeilmeldingShape
};
CheckboksPanelGruppe.defaultProps = {
    feil: undefined
};
exports.default = CheckboksPanelGruppe;
CheckboksPanelGruppe.__docgenInfo = {"description":"","displayName":"CheckboksPanelGruppe","props":{"checkboxes":{"defaultValue":null,"description":"Array av checkbokser, se 'checkboks-panel.tsx'","name":"checkboxes","required":true,"type":{"name":"CheckboksProps[]"}},"legend":{"defaultValue":null,"description":"Overskrift","name":"legend","required":true,"type":{"name":"ReactNode"}},"onChange":{"defaultValue":null,"description":"Callback-funksjon som blir kalt straks noen av checkboksene endrer state","name":"onChange","required":true,"type":{"name":"(event: SyntheticEvent<EventTarget>, value?: string) => void"}},"feil":{"defaultValue":null,"description":"Objekt som beskriver skjema-feil, se 'skjemaelement-feilmelding.tsx'","name":"feil","required":false,"type":{"name":"SkjemaelementFeil"}},"className":{"defaultValue":null,"description":"Styling klasse for container","name":"className","required":false,"type":{"name":"string"}}}}