"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var PT = require("prop-types");
var classNames = require("classnames");
require("nav-frontend-skjema-style");
var nav_frontend_js_utils_1 = require("nav-frontend-js-utils");
var _1 = require("./");
var skjemaelement_feilmelding_1 = require("./skjemaelement-feilmelding");

var RadioPanel = function (_React$Component) {
    _inherits(RadioPanel, _React$Component);

    function RadioPanel(props) {
        _classCallCheck(this, RadioPanel);

        var _this = _possibleConstructorReturn(this, (RadioPanel.__proto__ || Object.getPrototypeOf(RadioPanel)).call(this, props));

        _this.state = { hasFocus: false };
        return _this;
    }

    _createClass(RadioPanel, [{
        key: "toggleOutline",
        value: function toggleOutline() {
            this.setState({ hasFocus: !this.state.hasFocus });
        }
    }, {
        key: "render",
        value: function render() {
            var _this2 = this;

            var _props = this.props,
                id = _props.id,
                checked = _props.checked,
                disabled = _props.disabled,
                label = _props.label,
                name = _props.name,
                _onChange = _props.onChange,
                inputProps = _props.inputProps,
                value = _props.value;
            var hasFocus = this.state.hasFocus;

            var inputId = id || nav_frontend_js_utils_1.guid();
            var cls = classNames('inputPanel radioPanel', {
                'inputPanel--checked': checked && !disabled,
                'inputPanel--focused': hasFocus && !disabled,
                'inputPanel--disabled': disabled === true
            });
            return React.createElement("label", { className: cls, htmlFor: inputId }, React.createElement("input", Object.assign({ value: value }, inputProps, { id: inputId, className: "inputPanel__field", type: "radio", name: name, checked: checked, "aria-checked": checked, disabled: disabled, onFocus: function onFocus() {
                    return _this2.toggleOutline();
                }, onBlur: function onBlur() {
                    return _this2.toggleOutline();
                }, onChange: function onChange(event) {
                    return _onChange(event);
                } })), React.createElement("span", { className: "inputPanel__label" }, label));
        }
    }]);

    return RadioPanel;
}(React.Component);

exports.RadioPanel = RadioPanel;

var RadioPanelGruppe = function (_React$Component2) {
    _inherits(RadioPanelGruppe, _React$Component2);

    function RadioPanelGruppe() {
        _classCallCheck(this, RadioPanelGruppe);

        return _possibleConstructorReturn(this, (RadioPanelGruppe.__proto__ || Object.getPrototypeOf(RadioPanelGruppe)).apply(this, arguments));
    }

    _createClass(RadioPanelGruppe, [{
        key: "render",
        value: function render() {
            var _props2 = this.props,
                radios = _props2.radios,
                name = _props2.name,
                legend = _props2.legend,
                feil = _props2.feil,
                checked = _props2.checked,
                _onChange2 = _props2.onChange,
                className = _props2.className;

            var cls = classNames('inputPanelGruppe', className);
            return React.createElement(_1.SkjemaGruppe, { className: cls, feil: feil }, React.createElement(_1.Fieldset, { legend: legend }, React.createElement("div", { className: "inputPanelGruppe__inner" }, radios.map(function (radio) {
                return React.createElement(RadioPanel, Object.assign({ name: name, key: name + "-" + radio.value, checked: checked === radio.value, onChange: function onChange(event) {
                        return _onChange2(event, radio.value);
                    } }, radio));
            }))));
        }
    }]);

    return RadioPanelGruppe;
}(React.Component);

RadioPanelGruppe.propTypes = {
    radios: PT.array.isRequired,
    name: PT.string.isRequired,
    legend: PT.node.isRequired,
    onChange: PT.func.isRequired,
    className: PT.string,
    feil: skjemaelement_feilmelding_1.skjemaelementFeilmeldingShape
};
RadioPanelGruppe.defaultProps = {
    feil: undefined
};
exports.default = RadioPanelGruppe;
RadioPanel.__docgenInfo = {"description":"","displayName":"RadioPanel","props":{}}