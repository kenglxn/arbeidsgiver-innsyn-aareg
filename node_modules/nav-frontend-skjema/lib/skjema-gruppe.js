"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

Object.defineProperty(exports, "__esModule", { value: true });
var PT = require("prop-types");
var React = require("react");
var classNames = require("classnames");
require("nav-frontend-skjema-style");
var skjemaelement_feilmelding_1 = require("./skjemaelement-feilmelding"); // tslint:disable-line:max-line-length
var cls = function cls(className, harFeil) {
    return classNames(className, {
        'skjema__feilomrade--harFeil': harFeil
    });
};
/**
 * Fieldset
 */

var SkjemaGruppe = function (_React$Component) {
    _inherits(SkjemaGruppe, _React$Component);

    function SkjemaGruppe() {
        _classCallCheck(this, SkjemaGruppe);

        return _possibleConstructorReturn(this, (SkjemaGruppe.__proto__ || Object.getPrototypeOf(SkjemaGruppe)).apply(this, arguments));
    }

    _createClass(SkjemaGruppe, [{
        key: "renderTitle",
        value: function renderTitle() {
            return React.createElement("div", { className: "skjemaelement__sporsmal" }, this.props.title);
        }
    }, {
        key: "render",
        value: function render() {
            var _props = this.props,
                children = _props.children,
                className = _props.className,
                title = _props.title,
                feil = _props.feil,
                other = _objectWithoutProperties(_props, ["children", "className", "title", "feil"]);

            return React.createElement("div", Object.assign({ className: cls(className, feil) }, other), title && this.renderTitle(), children, React.createElement(skjemaelement_feilmelding_1.default, { feil: feil }));
        }
    }]);

    return SkjemaGruppe;
}(React.Component);

SkjemaGruppe.propTypes = {
    /**
     * En eller flere children, oftest en eller flere .skjemaelement
     */
    children: PT.oneOfType([PT.arrayOf(PT.node), PT.node]).isRequired,
    /**
     * ClassName
     */
    className: PT.string,
    /**
     * Tittel eller skjemaspørsmål for skjemagruppe
     */
    title: PT.string,
    /**
     * Hvis skjemagruppen har feil sender man inn et objekt med en feilmelding
     */
    feil: skjemaelement_feilmelding_1.skjemaelementFeilmeldingShape
};
SkjemaGruppe.defaultProps = {
    className: undefined,
    feil: undefined,
    title: undefined
};
exports.default = SkjemaGruppe;
SkjemaGruppe.__docgenInfo = {"description":"Fieldset","displayName":"SkjemaGruppe","props":{"children":{"defaultValue":null,"description":"En eller flere children, oftest en eller flere .skjemaelement","name":"children","required":true,"type":{"name":"string | number | boolean | {} | ReactElement<any> | ReactNodeArray | ReactPortal | ReactNode[] |..."}},"className":{"defaultValue":null,"description":"ClassName","name":"className","required":false,"type":{"name":"string"}},"title":{"defaultValue":null,"description":"Tittel eller skjemaspørsmål for skjemagruppe","name":"title","required":false,"type":{"name":"string"}},"feil":{"defaultValue":null,"description":"Hvis skjemagruppen har feil sender man inn et objekt med en feilmelding","name":"feil","required":false,"type":{"name":"SkjemaelementFeil"}}}}