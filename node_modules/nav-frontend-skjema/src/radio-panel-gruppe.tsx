import * as React from 'react';
import * as PT from 'prop-types';
import * as classNames from 'classnames';
import 'nav-frontend-skjema-style';
import { guid } from 'nav-frontend-js-utils';
import { SkjemaGruppe, Fieldset } from './';
import { SkjemaelementFeil, skjemaelementFeilmeldingShape } from './skjemaelement-feilmelding';

export interface RadioProps {
    label: React.ReactNode;
    value: string;
    disabled?: boolean;
    inputProps?: React.InputHTMLAttributes<HTMLInputElement>;
}

export interface RadioPanelGruppeProps {
    radios: RadioProps[];
    name: string;
    legend: React.ReactNode;
    onChange: (event: React.SyntheticEvent<EventTarget>, value: string) => void;
    className?: string;
    checked?: string;
    feil?: SkjemaelementFeil;
}

export interface RadioPanelProps extends RadioProps {
    id?: string;
    checked: boolean;
    name: string;
    onChange: (event: React.SyntheticEvent<EventTarget>) => void;
    inputProps?: React.InputHTMLAttributes<HTMLInputElement>;
}

export interface RadioPanelState {
    hasFocus: boolean;
}

export class RadioPanel extends React.Component<RadioPanelProps, RadioPanelState> {
    constructor(props: RadioPanelProps) {
        super(props);
        this.state = { hasFocus: false };
    }

    toggleOutline() {
        this.setState({ hasFocus: !this.state.hasFocus });
    }

    render() {
        const { id, checked, disabled, label, name, onChange, inputProps, value } = this.props;
        const { hasFocus } = this.state;
        const inputId = id || guid();

        const cls = classNames('inputPanel radioPanel', {
            'inputPanel--checked': checked && !disabled,
            'inputPanel--focused': hasFocus && !disabled,
            'inputPanel--disabled': disabled === true
        });

        return (
            <label className={cls} htmlFor={inputId}>
                <input
                    value={value}
                    {...inputProps}
                    id={inputId}
                    className="inputPanel__field"
                    type="radio"
                    name={name}
                    checked={checked}
                    aria-checked={checked}
                    disabled={disabled}
                    onFocus={() => this.toggleOutline()}
                    onBlur={() => this.toggleOutline()}
                    onChange={(event: React.SyntheticEvent<EventTarget>) => onChange(event)}
                />
                <span className="inputPanel__label">{label}</span>
            </label>
        );
    }
}

class RadioPanelGruppe extends React.Component<RadioPanelGruppeProps> {
    render() {
        const { radios, name, legend, feil, checked, onChange, className } = this.props;
        const cls = classNames('inputPanelGruppe', className);
        return (
            <SkjemaGruppe className={cls} feil={feil}>
                <Fieldset legend={legend}>
                    <div className="inputPanelGruppe__inner">
                        {radios.map((radio: RadioProps) => (
                            <RadioPanel
                                name={name}
                                key={`${name}-${radio.value}`}
                                checked={checked === radio.value}
                                onChange={(event: React.SyntheticEvent<EventTarget>) => onChange(event, radio.value)}
                                {...radio}
                            />
                        ))}
                    </div>
                </Fieldset>
            </SkjemaGruppe>
        );
    }
}

(RadioPanelGruppe as React.ComponentClass).propTypes = {
    radios: PT.array.isRequired,
    name: PT.string.isRequired,
    legend: PT.node.isRequired,
    onChange: PT.func.isRequired,
    className: PT.string,
    feil: skjemaelementFeilmeldingShape
};

(RadioPanelGruppe as React.ComponentClass).defaultProps = {
    feil: undefined
};

export default RadioPanelGruppe;
