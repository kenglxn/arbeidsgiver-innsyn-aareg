import * as PT from 'prop-types';
import * as React from 'react';
import { EventThrottler, guid, autobind, requestAnimationFrame } from 'nav-frontend-js-utils';
import 'nav-frontend-skjema-style';
import * as classNames from 'classnames';
import SkjemaelementFeilmelding, { skjemaelementFeilmeldingShape, SkjemaelementFeil } from './skjemaelement-feilmelding'; // tslint:disable-line:max-line-length

const inputCls = (className, harFeil) => classNames(
    className,
    'skjemaelement__input textarea--medMeta',
    { 'skjemaelement__input--harFeil': harFeil }
);

const tellerTekstCls = (remaining) => classNames('teller-tekst', {
    'teller-tekst--overflow': remaining < 0
});

export interface TextareaProps extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {
    /**
     * Ledetekst for tekstområdet
     */
    label: React.ReactNode;
    /**
     * Maks antal tegn som kan skrives inn i tekstområdet
     */
    maxLength?: number;
    /**
     * Teksten som er skrevet inn i tekstområdet.
     */
    value: string;
    /**
     * Klassenavn for tekstomnrådet
     */
    textareaClass?: string;
    /**
     * Id for tekstområdet, settes til name eller random guid hvis prop ikke er satt
     */
    id?: string;
    /**
     * Navn for tekstområdet, settes til id eller random guid hvis prop ikke er satt
     */
    name?: string;
    /**
     * OnChange er pliktig
     */
    onChange: React.ChangeEventHandler<HTMLTextAreaElement>;
    /**
     * Hvis skjemaet har feil sender man inn et objekt med en feilmelding
     */
    feil?: SkjemaelementFeil;
    tellerTekst?: (antallTegn: number, maxLength: number) => React.ReactNode;
    textareaRef?: () => any;
}

interface TextareaDefaultProps {
    maxLength: number;
    textareaClass: string;
    tellerTekst: (antallTegn: number, maxLength: number) => React.ReactNode;
}

type PropsWithDefault = TextareaProps & TextareaDefaultProps;

/**
 * Selvekspanderende tekstområde med teller
 */
class Textarea extends React.Component<TextareaProps> {
    private mirror;
    private tekstomrade;

    static propTypes = {
        /**
         * Ledetekst for tekstområdet
         */
        label: PT.node.isRequired,
        /**
         * Maks antal tegn som kan skrives inn i tekstområdet
         */
        maxLength: PT.number,
        /**
         * Teksten som er skrevet inn i tekstområdet.
         */
        value: PT.string.isRequired,
        /**
         * Klassenavn for tekstomnrådet
         */
        textareaClass: PT.string,
        /**
         * Id for tekstområdet, settes til name eller random guid hvis prop ikke er satt
         */
        id: PT.string,
        /**
         * Navn for tekstområdet, settes til id eller random guid hvis prop ikke er satt
         */
        name: PT.string,
        /**
         * Optional onChange handler
         */
        onChange: PT.func.isRequired,
        /**
         * Hvis skjemaet har feil sender man inn et objekt med en feilmelding
         */
        feil: skjemaelementFeilmeldingShape,
        /**
         * Funksjon for å generere tellerteksten som vises nede i høyre hjørne
         */
        tellerTekst: PT.func,
        /**
         * Referanse til selve textareafeltet. Brukes for eksempel til å sette fokus
         */
        textareaRef: PT.func
    };

    static defaultProps = {
        maxLength: 2000,
        textareaClass: '',
        id: undefined,
        name: undefined,
        feil: undefined,
        tellerTekst: defaultTellerTekst,
        textareaRef: undefined
    };

    constructor(props) {
        super(props);
        autobind(this);
    }

    componentDidMount() {
        requestAnimationFrame.call(window, this.updateHeight, 0);
    }

    componentDidUpdate(prevProps) {
        if (prevProps.value !== this.props.value) {
            this.updateHeight();
        }
    }

    updateHeight() {
        if (this.mirror && this.tekstomrade) {
            this.mirror.textContent = `${this.tekstomrade.value} `;
            // eslint-disable-next-line no-param-reassign
            this.tekstomrade.style.height = `${this.mirror.offsetHeight + 25}px`;
        }
    }

    renderTextareaElement(textareaRef, textareaClass, feil, textareaId, name, onChange, other) {
        return (
            <textarea
                ref={(textarea) => {
                    this.tekstomrade = textarea;
                    if (textareaRef !== undefined) textareaRef(textarea);
                }}
                onChange={onChange}
                className={inputCls(textareaClass, feil)}
                type="text"
                id={textareaId}
                name={name}
                style={{ height: '30px' }}
                {...other}
            />
        );
    }

    render() {
        const { label, maxLength, textareaClass, id, name, feil, tellerTekst, textareaRef, onChange, ...other } =
            this.props as PropsWithDefault;
        const textareaId = id || name || guid();
        const antallTegn = other.value.length;
        const textareaEl = this.renderTextareaElement(
            textareaRef,
            textareaClass,
            feil,
            textareaId,
            name,
            onChange,
            other
        );

        return (
            <div className="skjemaelement textarea__container">
                <label className="skjemaelement__label" htmlFor={textareaId}>
                    {label}
                </label>
                <div className="textarea--medMeta__wrapper">
                    <EventThrottler event="resize" callback={this.updateHeight} delay={100}>
                        {textareaEl}
                    </EventThrottler>
                    {!!maxLength && <Teller antallTegn={antallTegn} maxLength={maxLength} tellerTekst={tellerTekst}/>}
                </div>
                <SkjemaelementFeilmelding feil={feil} />
                <div
                    className="textareamirror"
                    ref={(mirror) => { this.mirror = mirror; }}
                    aria-hidden="true"
                />
            </div>
        );
    }
}

interface TellerProps {
    antallTegn: number;
    maxLength: number;
    tellerTekst: (antallTegn: number, maxLength: number) => React.ReactNode;
}

const Teller = (props: TellerProps) => {
    return (
        <p className="textarea--medMeta__teller">
            {props.tellerTekst(props.antallTegn, props.maxLength)}
        </p>
    );
};

function defaultTellerTekst(antallTegn, maxLength) {
    const difference = maxLength - antallTegn;
    return (
        <span
            className={tellerTekstCls(difference)}
            aria-live="polite"
        >
            { (difference >= 0) && `Du har ${difference} tegn igjen` }
            { (difference < 0) && `Du har ${Math.abs(difference)} tegn for mye` }
        </span>
    );
}

export default Textarea;
