import * as React from 'react';
import * as classNames from 'classnames';
import { guid } from 'nav-frontend-js-utils';
import { SkjemaelementFeil } from './skjemaelement-feilmelding';
import 'nav-frontend-skjema-style';

export interface CheckboksProps {
    checked: boolean;
    label: React.ReactNode;
    subtext?: string;
    value?: string;
    id?: string;
    disabled?: boolean;
    feil?: SkjemaelementFeil;
    inputProps?: React.InputHTMLAttributes<HTMLInputElement>;
}

export interface CheckboksPanelProps extends CheckboksProps {
    id?: string;
    checked: boolean;
    onChange: (event: React.SyntheticEvent<EventTarget>) => void;
    inputProps?: React.InputHTMLAttributes<HTMLInputElement>;
}

export interface CheckboksPanelState {
    checked: boolean;
    hasFocus: boolean;
}

export class CheckboksPanel extends React.Component<CheckboksPanelProps, CheckboksPanelState> {
    constructor(props: CheckboksPanelProps) {
        super(props);
        this.state = { hasFocus: false, checked: this.props.checked };
    }

    componentWillReceiveProps(newProps) {
        this.setState({ checked: newProps.checked });
    }

    toggleOutline() {
        this.setState({ hasFocus: !this.state.hasFocus });
    }

    handleChange = (e) => {
        this.setState({ checked: e.target.checked });
        if (typeof this.props.onChange === 'function') this.props.onChange(e);
    }

    render() {
        const { id, label, subtext, inputProps, disabled } = this.props;
        const { hasFocus, checked } = this.state;
        const inputId = id || guid();

        const cls = classNames('inputPanel checkboksPanel', {
            'inputPanel--checked': checked && !disabled,
            'inputPanel--focused': hasFocus && !disabled,
            'inputPanel--disabled': disabled === true
        });

        return (
            <label className={cls} htmlFor={inputId}>
                <input
                    {...inputProps}
                    id={inputId}
                    className="inputPanel__field"
                    type="checkbox"
                    checked={checked}
                    aria-checked={checked}
                    disabled={disabled}
                    onFocus={() => this.toggleOutline()}
                    onBlur={() => this.toggleOutline()}
                    onChange={this.handleChange}
                />
                <span className="inputPanel__label">{label}</span>
                {subtext && <span className="inputPanel__subtext">{subtext}</span>}
            </label>
        );
    }
}

export default CheckboksPanel;
