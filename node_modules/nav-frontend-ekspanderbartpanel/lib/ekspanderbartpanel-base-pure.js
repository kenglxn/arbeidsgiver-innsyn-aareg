"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var classnames = require("classnames");
var react_collapse_1 = require("react-collapse");
require("nav-frontend-ekspanderbartpanel-style");
var nav_frontend_js_utils_1 = require("nav-frontend-js-utils");
var cls = function cls(apen, border, className) {
    return classnames('ekspanderbartPanel', className, {
        'ekspanderbartPanel--lukket': !apen,
        'ekspanderbartPanel--apen': apen,
        'ekspanderbartPanel--border': border
    });
};

var EkspanderbartpanelBasePure = function (_React$Component) {
    _inherits(EkspanderbartpanelBasePure, _React$Component);

    function EkspanderbartpanelBasePure(props) {
        _classCallCheck(this, EkspanderbartpanelBasePure);

        var _this = _possibleConstructorReturn(this, (EkspanderbartpanelBasePure.__proto__ || Object.getPrototypeOf(EkspanderbartpanelBasePure)).call(this, props));

        _this.isCloseAnimation = false;
        _this.onRestProxy = function () {
            _this.isCloseAnimation = false;
            var collapseProps = _this.props.collapseProps;

            if (collapseProps && collapseProps.onRest) {
                collapseProps.onRest();
            }
        };
        _this.contentId = nav_frontend_js_utils_1.guid();
        return _this;
    }

    _createClass(EkspanderbartpanelBasePure, [{
        key: "componentDidUpdate",
        value: function componentDidUpdate(prevProps) {
            if (!this.props.apen && prevProps.apen) {
                this.isCloseAnimation = true;
            }
        }
    }, {
        key: "tabHandler",
        value: function tabHandler(event) {
            var keyCode = event.keyCode;

            var isTab = keyCode === 9;
            if (isTab && this.isCloseAnimation) {
                event.preventDefault();
            }
        }
    }, {
        key: "render",
        value: function render() {
            var _this2 = this;

            var _props = this.props,
                className = _props.className,
                children = _props.children,
                apen = _props.apen,
                heading = _props.heading,
                ariaTittel = _props.ariaTittel,
                onClick = _props.onClick,
                collapseProps = _props.collapseProps,
                border = _props.border,
                renderContentWhenClosed = _props.renderContentWhenClosed,
                renderProps = _objectWithoutProperties(_props, ["className", "children", "apen", "heading", "ariaTittel", "onClick", "collapseProps", "border", "renderContentWhenClosed"]);

            var contentId = collapseProps && collapseProps.id || this.contentId;
            var showContentId = !(!renderContentWhenClosed && !apen);
            var ariaControls = showContentId ? { 'aria-controls': contentId } : undefined;
            var CollapseComponent = renderContentWhenClosed ? react_collapse_1.Collapse : react_collapse_1.UnmountClosed;
            return React.createElement("div", Object.assign({ className: cls(apen, border, className) }, renderProps), React.createElement("button", Object.assign({ className: "ekspanderbartPanel__hode", onKeyDown: function onKeyDown(event) {
                    return _this2.tabHandler(event);
                }, onClick: onClick, "aria-expanded": apen, type: "button" }, ariaControls), React.createElement("div", { className: "ekspanderbartPanel__flex-wrapper" }, heading, React.createElement("span", { className: "ekspanderbartPanel__indikator" }))), React.createElement(CollapseComponent, Object.assign({ id: contentId, isOpened: apen, onRest: this.onRestProxy }, collapseProps), React.createElement("article", { "aria-label": ariaTittel, className: "ekspanderbartPanel__innhold" }, children)));
        }
    }]);

    return EkspanderbartpanelBasePure;
}(React.Component);

EkspanderbartpanelBasePure.defaultProps = {
    border: false
};
exports.default = EkspanderbartpanelBasePure;
EkspanderbartpanelBasePure.__docgenInfo = {"description":"","displayName":"EkspanderbartpanelBasePure","props":{}}