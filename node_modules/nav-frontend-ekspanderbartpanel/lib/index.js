"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
require("nav-frontend-ekspanderbartpanel-style");
var ekspanderbartpanel_pure_1 = require("./ekspanderbartpanel-pure");

var Ekspanderbartpanel = function (_React$Component) {
    _inherits(Ekspanderbartpanel, _React$Component);

    function Ekspanderbartpanel(props) {
        _classCallCheck(this, Ekspanderbartpanel);

        var _this = _possibleConstructorReturn(this, (Ekspanderbartpanel.__proto__ || Object.getPrototypeOf(Ekspanderbartpanel)).call(this, props));

        _this.state = {
            apen: _this.props.apen
        };
        _this.handleClick = _this.handleClick.bind(_this);
        return _this;
    }

    _createClass(Ekspanderbartpanel, [{
        key: "handleClick",
        value: function handleClick(event) {
            event.preventDefault();
            this.setState({ apen: !this.state.apen });
            if (this.props.onClick) {
                this.props.onClick(event);
            }
        }
    }, {
        key: "render",
        value: function render() {
            var _props = this.props,
                tag = _props.tag,
                tittel = _props.tittel,
                tittelProps = _props.tittelProps,
                renderProps = _objectWithoutProperties(_props, ["tag", "tittel", "tittelProps"]);

            return React.createElement(ekspanderbartpanel_pure_1.default, Object.assign({}, renderProps, { apen: this.state.apen, onClick: this.handleClick, tittel: tittel, tittelProps: tittelProps, tag: tag }));
        }
    }]);

    return Ekspanderbartpanel;
}(React.Component);

Ekspanderbartpanel.defaultProps = {
    apen: false,
    border: false
};
exports.default = Ekspanderbartpanel;
var ekspanderbartpanel_pure_2 = require("./ekspanderbartpanel-pure");
exports.EkspanderbartpanelPure = ekspanderbartpanel_pure_2.default;
var ekspanderbartpanel_base_1 = require("./ekspanderbartpanel-base");
exports.EkspanderbartpanelBase = ekspanderbartpanel_base_1.default;
var ekspanderbartpanel_base_pure_1 = require("./ekspanderbartpanel-base-pure");
exports.EkspanderbartpanelBasePure = ekspanderbartpanel_base_pure_1.default;
Ekspanderbartpanel.__docgenInfo = {"description":"","displayName":"Ekspanderbartpanel","props":{"apen":{"defaultValue":{"value":"false"},"description":"Skal komponenten være 'default' åpen","name":"apen","required":false,"type":{"name":"boolean"}},"onClick":{"defaultValue":null,"description":"Callback funksjon for når knappen blir klikket på","name":"onClick","required":false,"type":{"name":"(event: SyntheticEvent<HTMLButtonElement>) => void"}},"tittel":{"defaultValue":null,"description":"Tittel/label-tekst","name":"tittel","required":true,"type":{"name":"string"}},"tittelProps":{"defaultValue":null,"description":"Må være en gyldig 'type' prop på Typografi-komponenten, se 'nav-frontend-typografi'","name":"tittelProps","required":true,"type":{"name":"string"}},"border":{"defaultValue":{"value":"false"},"description":"Hvis komponenten skal brukes på hvit bakgrunn kan denne brukes for å gi den en border","name":"border","required":false,"type":{"name":"boolean"}},"tag":{"defaultValue":null,"description":"Typen tag som brukes for tittelen på Typografi-komponenten","name":"tag","required":false,"type":{"name":"string"}},"renderContentWhenClosed":{"defaultValue":null,"description":"Dersom innholdet skal rendres men ikke vises, når panelet er lukket","name":"renderContentWhenClosed","required":false,"type":{"name":"boolean"}},"className":{"defaultValue":null,"description":"Class som blir satt på det ytterste div-elementet","name":"className","required":false,"type":{"name":"string"}}}}