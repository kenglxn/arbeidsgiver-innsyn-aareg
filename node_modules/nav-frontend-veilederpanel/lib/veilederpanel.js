"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var PT = require("prop-types");
var cn = require("classnames");
var nav_frontend_veileder_1 = require("nav-frontend-veileder");
require("nav-frontend-veilederpanel-style");
var veilederPanelCls = function veilederPanelCls(props) {
  return cn('nav-veilederpanel', {
    'nav-veilederpanel--kompakt': props.kompakt,
    'nav-veilederpanel--plakat': props.type === 'plakat',
    'nav-veilederpanel--suksess': props.fargetema === 'suksess',
    'nav-veilederpanel--advarsel': props.fargetema === 'advarsel',
    'nav-veilederpanel--feilmelding': props.fargetema === 'feilmelding'
  });
};

var Veilederpanel = function (_React$Component) {
  _inherits(Veilederpanel, _React$Component);

  function Veilederpanel() {
    _classCallCheck(this, Veilederpanel);

    return _possibleConstructorReturn(this, (Veilederpanel.__proto__ || Object.getPrototypeOf(Veilederpanel)).apply(this, arguments));
  }

  _createClass(Veilederpanel, [{
    key: "render",
    value: function render() {
      var _props = this.props,
          svg = _props.svg,
          children = _props.children;

      var storrelse = this.props.type === 'plakat' ? 'M' : 'S';
      return React.createElement("div", { className: veilederPanelCls(this.props) }, React.createElement(nav_frontend_veileder_1.default, Object.assign({}, this.props.veilederProps, { fargetema: this.props.fargetema, storrelse: storrelse }), svg), React.createElement("div", { className: "nav-veilederpanel__content" }, children));
    }
  }]);

  return Veilederpanel;
}(React.Component);

Veilederpanel.propTypes = {
  /**
   * Egendefinert SVG som rendres i en Veileder-boble
   */
  svg: PT.node.isRequired,
  /**
   * Predefinerte fargetemaer som bestemmer bakgrunnsfargen på veilederen og
   * border på veilederpanelet.
   */
  fargetema: PT.oneOf(['normal', 'suksess', 'advarsel', 'feilmelding']),
  /**
   * Verdiene 'normal' og 'plakat' bestemmer henholdsvis om veilederen plasseres
   * til venstre eller over innholdet.
   */
  type: PT.oneOf(['normal', 'plakat']),
  /**
   * Kompakt versjon av veilederpanelet bruker litt mindre plass enn normalt, hvor
   * veilderen rendres overlappende med border på panelet.
   */
  kompakt: PT.bool,
  /**
   * Props som blir videreformidlet til intern instans av Veileder.
   */
  veilederProps: PT.shape(nav_frontend_veileder_1.VeilederPropsShape)
};
exports.default = Veilederpanel;
Veilederpanel.__docgenInfo = {"description":"","displayName":"Veilederpanel","props":{"svg":{"defaultValue":null,"description":"Egendefinert SVG som rendres i en Veileder-boble","name":"svg","required":true,"type":{"name":"ReactNode"}},"fargetema":{"defaultValue":null,"description":"Predefinerte fargetemaer som bestemmer bakgrunnsfargen på veilederen og\nborder på veilederpanelet.","name":"fargetema","required":false,"type":{"name":"\"normal\" | \"suksess\" | \"advarsel\" | \"feilmelding\""}},"type":{"defaultValue":null,"description":"Verdiene 'normal' og 'plakat' bestemmer henholdsvis om veilederen plasseres\ntil venstre eller over innholdet.","name":"type","required":false,"type":{"name":"enum","value":[{"value":"\"normal\""},{"value":"\"plakat\""}]}},"kompakt":{"defaultValue":null,"description":"Kompakt versjon av veilederpanelet bruker litt mindre plass enn normalt, hvor\nveilderen rendres overlappende med border på panelet.","name":"kompakt","required":false,"type":{"name":"boolean"}},"veilederProps":{"defaultValue":null,"description":"Props som blir videreformidlet til intern instans av Veileder.","name":"veilederProps","required":false,"type":{"name":"VeilederProps"}}}}