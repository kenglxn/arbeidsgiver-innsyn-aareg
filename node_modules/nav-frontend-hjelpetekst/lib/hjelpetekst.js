"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var PT = require("prop-types");
var classNames = require("classnames");
var nav_frontend_typografi_1 = require("nav-frontend-typografi");
require("nav-frontend-hjelpetekst-style");
var nav_frontend_ikoner_assets_1 = require("nav-frontend-ikoner-assets");
var DefaultAnchor = function DefaultAnchor(_ref) {
    var className = _ref.className,
        hover = _ref.hover;
    return React.createElement(nav_frontend_ikoner_assets_1.default, { kind: hover ? 'help-circle_hover' : 'help-circle', className: className });
};
DefaultAnchor.propTypes = {
    className: PT.string.isRequired,
    hover: PT.bool.isRequired
};
var cls = function cls(type, className) {
    return classNames('hjelpetekst__tooltip', className, {
        'hjelpetekst__tooltip--over': type === 'over',
        'hjelpetekst__tooltip--under': type === 'under' || type === 'under-hoyre',
        'hjelpetekst__tooltip--hoyre': type === 'hoyre',
        'hjelpetekst__tooltip--venstre': type === 'venstre',
        'hjelpetekst__tooltip--midtstilt': type === 'midt',
        'hjelpetekst__tooltip--under-venstre': type === 'under-venstre'
    });
};

var HjelpetekstBase = function (_React$Component) {
    _inherits(HjelpetekstBase, _React$Component);

    function HjelpetekstBase(props) {
        _classCallCheck(this, HjelpetekstBase);

        var _this = _possibleConstructorReturn(this, (HjelpetekstBase.__proto__ || Object.getPrototypeOf(HjelpetekstBase)).call(this, props));

        _this.toggleSynlighet = _this.toggleSynlighet.bind(_this);
        _this.stateChange = _this.stateChange.bind(_this);
        _this.toggleKeyListener = _this.toggleKeyListener.bind(_this);
        _this.handleDocumentKeyDown = _this.handleDocumentKeyDown.bind(_this);
        _this.renderContent = _this.renderContent.bind(_this);
        _this.handleHjelpetekstBlur = _this.handleHjelpetekstBlur.bind(_this);
        _this.state = {
            erSynlig: false,
            hover: false,
            focus: false,
            active: false,
            variant: 'over'
        };
        return _this;
    }

    _createClass(HjelpetekstBase, [{
        key: "componentWillUpdate",
        value: function componentWillUpdate(nextProps, nextState) {
            if (nextState.erSynlig && nextState.erSynlig !== this.state.erSynlig) {
                this.setVariant();
            }
        }
    }, {
        key: "setVariant",
        value: function setVariant() {
            var LIMIT = 330;
            var toggle = this.apneKnapp;
            if (toggle) {
                var rect = toggle.getBoundingClientRect();
                var right = window.innerWidth - rect.right;
                if (right < LIMIT) {
                    if (right < LIMIT / 2) {
                        this.setState({
                            variant: 'venstre'
                        });
                    } else {
                        this.setState({
                            variant: 'midt'
                        });
                    }
                } else {
                    this.setState({
                        variant: 'over'
                    });
                }
            }
        }
    }, {
        key: "getAriaId",
        value: function getAriaId() {
            return "tooltip-" + this.props.id;
        }
    }, {
        key: "getVariant",
        value: function getVariant() {
            if (!this.props.type || this.props.type === 'auto') {
                return this.state.variant;
            }
            return this.props.type;
        }
    }, {
        key: "handleDocumentKeyDown",
        value: function handleDocumentKeyDown(event) {
            if (event && event.key === 'Escape') {
                this.toggleSynlighet(event);
            }
        }
    }, {
        key: "handleHjelpetekstBlur",
        value: function handleHjelpetekstBlur(evt) {
            var _this2 = this;

            if (!this.state.erSynlig) {
                return;
            }
            window.setTimeout(function () {
                var focusElement = document.activeElement;
                if (focusElement === _this2.hjelpetekstInnhold || focusElement === _this2.lukkKnapp || focusElement === _this2.apneKnapp || _this2.hjelpetekstInnhold.contains && _this2.hjelpetekstInnhold.contains(focusElement)) {
                    return;
                }
                _this2.setState({
                    erSynlig: false
                });
            }, 0); // tslint:disable-line:align
        }
    }, {
        key: "toggleSynlighet",
        value: function toggleSynlighet(event) {
            var _this3 = this;

            event.preventDefault();
            event.stopPropagation();
            var erSynlig = !this.state.erSynlig;
            this.setState({
                erSynlig: erSynlig
            }, function () {
                return _this3.state.erSynlig ? _this3.hjelpetekstInnhold.focus() : _this3.apneKnapp.focus();
            });
            this.toggleKeyListener(erSynlig);
        }
    }, {
        key: "toggleKeyListener",
        value: function toggleKeyListener(erSynlig) {
            if (erSynlig) {
                document.addEventListener('keydown', this.handleDocumentKeyDown);
            } else {
                document.removeEventListener('keydown', this.handleDocumentKeyDown);
            }
        }
    }, {
        key: "stateChange",
        value: function stateChange(state, value) {
            var _this4 = this;

            return function () {
                return _this4.setState(_defineProperty({}, state, value));
            };
        }
    }, {
        key: "renderContent",
        value: function renderContent() {
            var _this5 = this;

            return React.createElement("div", { onBlur: this.handleHjelpetekstBlur, tabIndex: -1, id: this.getAriaId(), role: "tooltip", ref: function ref(div) {
                    _this5.hjelpetekstInnhold = div;
                }, className: cls(this.getVariant(), this.props.className) }, React.createElement("div", { className: "hjelpetekst__tekst" }, React.createElement(nav_frontend_typografi_1.Normaltekst, null, this.props.children)), React.createElement("button", { ref: function ref(button) {
                    _this5.lukkKnapp = button;
                }, className: "lukknapp lukknapp--hvit", "aria-controls": this.getAriaId(), "aria-label": "Lukk hjelpetekst", onClick: this.toggleSynlighet }, "Lukk hjelpetekst"));
        }
    }, {
        key: "render",
        value: function render() {
            var _this6 = this;

            var Hjelpetekst = this.state.erSynlig ? this.renderContent() : null;
            var Anchor = this.props.anchor;
            var ariaId = this.getAriaId();
            return React.createElement("div", { className: "hjelpetekst" }, React.createElement("button", { type: "button", ref: function ref(button) {
                    _this6.apneKnapp = button;
                }, className: "hjelpetekst__apneknapp", onClick: this.toggleSynlighet, onMouseEnter: this.stateChange('hover', true), onMouseLeave: this.stateChange('hover', false), onFocus: this.stateChange('focus', true), onBlur: function onBlur(event) {
                    _this6.stateChange('focus', false);
                    _this6.handleHjelpetekstBlur(event);
                }, onMouseDown: this.stateChange('active', true), onMouseUp: this.stateChange('active', false), title: this.props.tittel, "aria-label": this.props.tittel, "aria-pressed": this.state.erSynlig, "aria-describedby": this.state.erSynlig ? ariaId : undefined }, React.createElement("span", { className: "sr-only" }, this.props.tittel), React.createElement(Anchor, { className: "hjelpetekst__anchor", hover: this.state.hover, focus: this.state.focus, active: this.state.active })), Hjelpetekst);
        }
    }]);

    return HjelpetekstBase;
}(React.Component);

HjelpetekstBase.propTypes = {
    children: PT.node.isRequired,
    type: PT.oneOf(['over', 'under', 'hoyre', 'venstre', 'midt', 'auto', 'under-venstre', 'under-hoyre']),
    tittel: PT.string,
    className: PT.string,
    anchor: PT.func,
    id: PT.string.isRequired
};
HjelpetekstBase.defaultProps = {
    tittel: 'Hjelptekst',
    className: undefined,
    anchor: DefaultAnchor,
    id: 'undefined',
    type: 'auto'
};
exports.default = HjelpetekstBase;
var hjelpetekst_over_1 = require("./hjelpetekst-over");
exports.HjelpetekstOver = hjelpetekst_over_1.default;
var hjelpetekst_under_1 = require("./hjelpetekst-under");
exports.HjelpetekstUnder = hjelpetekst_under_1.default;
var hjelpetekst_under_hoyre_1 = require("./hjelpetekst-under-hoyre");
exports.HjelpetekstUnderHoyre = hjelpetekst_under_hoyre_1.default;
var hjelpetekst_under_venstre_1 = require("./hjelpetekst-under-venstre");
exports.HjelpetekstUnderVenstre = hjelpetekst_under_venstre_1.default;
var hjelpetekst_hoyre_1 = require("./hjelpetekst-hoyre");
exports.HjelpetekstHoyre = hjelpetekst_hoyre_1.default;
var hjelpetekst_venstre_1 = require("./hjelpetekst-venstre");
exports.HjelpetekstVenstre = hjelpetekst_venstre_1.default;
var hjelpetekst_midt_1 = require("./hjelpetekst-midt");
exports.HjelpetekstMidt = hjelpetekst_midt_1.default;
var hjelpetekst_auto_1 = require("./hjelpetekst-auto");
exports.HjelpetekstAuto = hjelpetekst_auto_1.default;
HjelpetekstBase.__docgenInfo = {"description":"","displayName":"HjelpetekstBase","props":{"children":{"defaultValue":null,"description":"Innholdet i hjelpetekst-vinduet","name":"children","required":true,"type":{"name":"ReactNode"}},"id":{"defaultValue":null,"description":"-","name":"id","required":true,"type":{"name":"string"}},"className":{"defaultValue":null,"description":"-","name":"className","required":false,"type":{"name":"string"}},"tittel":{"defaultValue":null,"description":"Tekst som vises ved mouseover","name":"tittel","required":false,"type":{"name":"string"}},"type":{"defaultValue":null,"description":"Posisjon på hjelpetekst-vinduet","name":"type","required":false,"type":{"name":"enum","value":[{"value":"\"auto\""},{"value":"\"over\""},{"value":"\"under\""},{"value":"\"venstre\""},{"value":"\"midt\""},{"value":"\"hoyre\""},{"value":"\"under-venstre\""},{"value":"\"under-hoyre\""}]}},"anchor":{"defaultValue":null,"description":"-","name":"anchor","required":false,"type":{"name":"any"}}}}