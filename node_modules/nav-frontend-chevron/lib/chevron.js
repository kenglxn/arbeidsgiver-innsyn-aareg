"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

Object.defineProperty(exports, "__esModule", { value: true });
var PT = require("prop-types");
var React = require("react");
var classNames = require("classnames");
require("nav-frontend-chevron-style");
// export type ChevronType = 'høyre' | 'venstre' | 'ned' | 'opp';
var cls = function cls(type, stor, className) {
    return classNames('nav-frontend-chevron chevronboks', className, {
        'chevron--stor': stor
    }, {
        'chevron--hoyre': type === 'høyre',
        'chevron--venstre': type === 'venstre',
        'chevron--ned': type === 'ned',
        'chevron--opp': type === 'opp'
    });
};

var NavFrontendChevron = function (_React$Component) {
    _inherits(NavFrontendChevron, _React$Component);

    function NavFrontendChevron() {
        _classCallCheck(this, NavFrontendChevron);

        return _possibleConstructorReturn(this, (NavFrontendChevron.__proto__ || Object.getPrototypeOf(NavFrontendChevron)).apply(this, arguments));
    }

    _createClass(NavFrontendChevron, [{
        key: "render",
        value: function render() {
            var _props = this.props,
                type = _props.type,
                stor = _props.stor,
                className = _props.className,
                props = _objectWithoutProperties(_props, ["type", "stor", "className"]);

            return React.createElement("i", Object.assign({ className: cls(type, stor, className) }, props));
        }
    }]);

    return NavFrontendChevron;
}(React.Component);

NavFrontendChevron.defaultProps = {
    type: 'høyre',
    stor: false,
    className: ''
};
NavFrontendChevron.propTypes = {
    /**
     * Bestemmer hvilken vei Chevron skal peke
     */
    type: PT.oneOf(['høyre', 'venstre', 'opp', 'ned']),
    /**
     * Sett denne proppen hvis chevron skal være stor
     */
    stor: PT.bool,
    /**
     * Klassenavn for chevron
     */
    className: PT.string
};
exports.default = NavFrontendChevron;
var hoyre_chevron_1 = require("./hoyre-chevron");
exports.HoyreChevron = hoyre_chevron_1.default;
var venstre_chevron_1 = require("./venstre-chevron");
exports.VenstreChevron = venstre_chevron_1.default;
var opp_chevron_1 = require("./opp-chevron");
exports.OppChevron = opp_chevron_1.default;
var ned_chevron_1 = require("./ned-chevron");
exports.NedChevron = ned_chevron_1.default;
NavFrontendChevron.__docgenInfo = {"description":"","displayName":"NavFrontendChevron","props":{"type":{"defaultValue":null,"description":"Bestemmer hvilken vei Chevron skal peke","name":"type","required":false,"type":{"name":"enum","value":[{"value":"\"høyre\""},{"value":"\"venstre\""},{"value":"\"ned\""},{"value":"\"opp\""}]}},"stor":{"defaultValue":null,"description":"Sett denne proppen hvis chevron skal være stor","name":"stor","required":false,"type":{"name":"boolean"}},"className":{"defaultValue":null,"description":"Klassenavn for chevron","name":"className","required":false,"type":{"name":"string"}}}}