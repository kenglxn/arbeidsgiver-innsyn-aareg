"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var chevron_1 = require("./chevron");

var VenstreChevron = function (_React$Component) {
    _inherits(VenstreChevron, _React$Component);

    function VenstreChevron() {
        _classCallCheck(this, VenstreChevron);

        return _possibleConstructorReturn(this, (VenstreChevron.__proto__ || Object.getPrototypeOf(VenstreChevron)).apply(this, arguments));
    }

    _createClass(VenstreChevron, [{
        key: "render",
        value: function render() {
            return React.createElement(chevron_1.default, Object.assign({}, this.props, { type: "venstre" }));
        }
    }]);

    return VenstreChevron;
}(React.Component);

VenstreChevron.propTypes = {};
exports.default = VenstreChevron;
VenstreChevron.__docgenInfo = {"description":"","displayName":"VenstreChevron","props":{"type":{"defaultValue":null,"description":"Bestemmer hvilken vei Chevron skal peke","name":"type","required":false,"type":{"name":"enum","value":[{"value":"\"høyre\""},{"value":"\"venstre\""},{"value":"\"ned\""},{"value":"\"opp\""}]}},"stor":{"defaultValue":null,"description":"Sett denne proppen hvis chevron skal være stor","name":"stor","required":false,"type":{"name":"boolean"}},"className":{"defaultValue":null,"description":"Klassenavn for chevron","name":"className","required":false,"type":{"name":"string"}}}}